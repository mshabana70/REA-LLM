{
    "raw": "package com.ansca.corona;\n\nimport android.app.Activity;\nimport android.app.AlertDialog;\nimport android.app.UiModeManager;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.pm.ActivityInfo;\nimport android.content.res.Configuration;\nimport android.content.res.Resources;\nimport android.database.ContentObserver;\nimport android.database.Cursor;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.graphics.Point;\nimport android.media.AudioManager;\nimport android.media.MediaPlayer;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.os.Environment;\nimport android.os.Handler;\nimport android.provider.Settings;\nimport android.util.DisplayMetrics;\nimport android.util.Log;\nimport android.view.Display;\nimport android.view.DisplayCutout;\nimport android.view.KeyCharacterMap;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.ViewConfiguration;\nimport android.view.ViewGroup;\nimport android.view.ViewTreeObserver;\nimport android.view.WindowManager;\nimport android.view.animation.AlphaAnimation;\nimport android.view.inputmethod.InputMethodManager;\nimport android.widget.FrameLayout;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport androidx.core.view.ViewCompat;\nimport com.ansca.corona.events.EventManager;\nimport com.ansca.corona.events.ImagePickerTask;\nimport com.ansca.corona.events.MediaPickerTask;\nimport com.ansca.corona.events.NotificationReceivedTask;\nimport com.ansca.corona.events.RunnableEvent;\nimport com.ansca.corona.events.VideoPickerTask;\nimport com.ansca.corona.graphics.opengl.CoronaGLSurfaceView;\nimport com.ansca.corona.input.ViewInputHandler;\nimport com.ansca.corona.permissions.PermissionState;\nimport com.ansca.corona.permissions.PermissionUrgency;\nimport com.ansca.corona.permissions.PermissionsServices;\nimport com.ansca.corona.permissions.PermissionsSettings;\nimport com.ansca.corona.permissions.RequestPermissionsResultData;\nimport com.ansca.corona.purchasing.StoreName;\nimport com.ansca.corona.purchasing.StoreProxy;\nimport com.ansca.corona.storage.FileServices;\nimport com.ansca.corona.storage.ResourceServices;\nimport com.ansca.corona.storage.UniqueFileNameBuilder;\nimport com.facebook.appevents.codeless.internal.Constants;\nimport com.google.android.gms.common.ConnectionResult;\nimport com.naef.jnlua.LuaState;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.TreeSet;\n/* loaded from: classes.dex */\npublic class CoronaActivity extends Activity {\n    private Controller fController;\n    private CoronaRuntime fCoronaRuntime;\n    private EventHandler fEventHandler;\n    private LinearLayout fSplashView;\n    private long fStartTime;\n    private CoronaGLSurfaceView myGLView;\n    private ViewInputHandler myInputHandler;\n    private CoronaStatusBarSettings myStatusBarMode;\n    private final int MIN_REQUEST_CODE = 1;\n    private Intent myInitialIntent = null;\n    private boolean myIsActivityResumed = false;\n    private boolean myIsOrientationLocked = false;\n    private ImageView fSplashScreenView = null;\n    private StoreProxy myStore = null;\n    private ContentObserver fAutoRotateObserver = null;\n    private DisplayCutout fDisplayCutout = null;\n    private int SPLASH_SCREEN_DURATION = ConnectionResult.DRIVE_EXTERNAL_STORAGE_REQUIRED;\n    private Handler myHandler = null;\n    private CoronaRuntimeTaskDispatcher myRuntimeTaskDispatcher = null;\n    private int myInitialOrientationSetting = -1;\n    private int fLoggedOrientation = -1;\n    private HashMap<Integer, ResultHandler> fActivityResultHandlers = new HashMap<>();\n    private ArrayList<OnNewIntentResultHandler> fNewIntentResultHandlers = new ArrayList<>();\n    private HashMap<Integer, ResultHandler> fRequestPermissionsResultHandlers = new HashMap<>();\n\n    /* JADX INFO: Access modifiers changed from: private */\n    /* loaded from: classes.dex */\n    public interface MediaEventGenerator {\n        MediaPickerTask generateEvent(String str);\n\n        MediaPickerTask generateEvent(String str, int i, long j);\n    }\n\n    /* loaded from: classes.dex */\n    public interface OnActivityResultHandler extends ResultHandler {\n        void onHandleActivityResult(CoronaActivity coronaActivity, int i, int i2, Intent intent);\n    }\n\n    /* loaded from: classes.dex */\n    public interface OnNewIntentResultHandler extends ResultHandler {\n        void onHandleNewIntentResult(Intent intent);\n    }\n\n    /* loaded from: classes.dex */\n    public interface OnRequestPermissionsResultHandler extends ResultHandler {\n        void onHandleRequestPermissionsResult(CoronaActivity coronaActivity, int i, String[] strArr, int[] iArr);\n    }\n\n    /* JADX INFO: Access modifiers changed from: private */\n    /* loaded from: classes.dex */\n    public interface ResultHandler {\n    }\n\n    public boolean hasFixedOrientation() {\n        return false;\n    }\n\n    int screenOrientationFilter(int i) {\n        if (i != 2 && i != 3) {\n            if (i != 4) {\n                if (i != 5) {\n                    switch (i) {\n                        case 10:\n                        case 13:\n                            break;\n                        case 11:\n                            return 6;\n                        case 12:\n                            return 7;\n                        case 14:\n                            break;\n                        default:\n                            return i;\n                    }\n                }\n            }\n            return -1;\n        }\n        return 1;\n    }\n\n    /* JADX INFO: Access modifiers changed from: package-private */\n    public void showSplashScreen() {\n    }\n\n    public boolean supportsOrientationChanges() {\n        return false;\n    }\n\n    /* JADX INFO: Access modifiers changed from: package-private */\n    public CoronaRuntime getRuntime() {\n        return this.fCoronaRuntime;\n    }\n\n    /* JADX WARN: Can't wrap try/catch for region: R(21:1|(1:3)|4|5|6|(15:10|11|(1:13)|14|(1:16)|17|18|19|(2:25|(1:30)(1:29))|31|32|33|34|35|(2:37|38)(1:40))|48|11|(0)|14|(0)|17|18|19|(5:21|23|25|(1:27)|30)|31|32|33|34|35|(0)(0)) */\n    /* JADX WARN: Code restructure failed: missing block: B:35:0x00ba, code lost:\n        r4 = move-exception;\n     */\n    /* JADX WARN: Code restructure failed: missing block: B:36:0x00bb, code lost:\n        r4.printStackTrace();\n     */\n    /* JADX WARN: Code restructure failed: missing block: B:40:0x013c, code lost:\n        r4 = move-exception;\n     */\n    /* JADX WARN: Code restructure failed: missing block: B:41:0x013d, code lost:\n        r3.fController.showNativeAlert(\"Error\", r4.getMessage(), null);\n     */\n    /* JADX WARN: Removed duplicated region for block: B:17:0x004a  */\n    /* JADX WARN: Removed duplicated region for block: B:20:0x006a  */\n    /* JADX WARN: Removed duplicated region for block: B:44:0x0197  */\n    /* JADX WARN: Removed duplicated region for block: B:53:? A[RETURN, SYNTHETIC] */\n    @Override // android.app.Activity\n    /*\n        Code decompiled incorrectly, please refer to instructions dump.\n        To view partially-correct add '--show-bad-code' argument\n    */\n    protected void onCreate(android.os.Bundle r4) {\n        /*\n            Method dump skipped, instructions count: 411\n            To view this dump add '--comments-level debug' option\n        */\n        throw new UnsupportedOperationException(\"Method not decompiled: com.ansca.corona.CoronaActivity.onCreate(android.os.Bundle):void\");\n    }\n\n    public AlertDialog.Builder createAlertDialogBuilder(Context context) {\n        Controller controller = this.fController;\n        if (controller == null) {\n            return null;\n        }\n        return controller.createAlertDialogBuilder(context);\n    }\n\n    public AlertDialog.Builder createDarkAlertDialogBuilder(Context context) {\n        Controller controller = this.fController;\n        if (controller == null) {\n            return null;\n        }\n        return controller.createDarkAlertDialogBuilder(context);\n    }\n\n    public AlertDialog.Builder createLightAlertDialogBuilder(Context context) {\n        Controller controller = this.fController;\n        if (controller == null) {\n            return null;\n        }\n        return controller.createLightAlertDialogBuilder(context);\n    }\n\n    public void showPermissionMissingFromManifestAlert(String str, String str2) {\n        Controller controller = this.fController;\n        if (controller == null) {\n            return;\n        }\n        controller.showPermissionMissingFromManifestAlert(str, str2);\n    }\n\n    public void showPermissionGroupMissingFromManifestAlert(String str) {\n        Controller controller = this.fController;\n        if (controller == null) {\n            return;\n        }\n        controller.showPermissionGroupMissingFromManifestAlert(str);\n    }\n\n    private void initializeOrientation() {\n        this.myInitialOrientationSetting = getRequestedOrientation();\n        try {\n            ActivityInfo activityInfo = getPackageManager().getActivityInfo(getComponentName(), 128);\n            if (activityInfo != null && activityInfo.metaData != null) {\n                String string = activityInfo.metaData.getString(\"requestedDefaultOrientation\");\n                if (string.equals(\"portrait\")) {\n                    this.myInitialOrientationSetting = 1;\n                } else if (string.equals(\"landscape\")) {\n                    this.myInitialOrientationSetting = 0;\n                } else if (string.equals(\"reversePortrait\")) {\n                    this.myInitialOrientationSetting = 9;\n                } else if (string.equals(\"reverseLandscape\")) {\n                    this.myInitialOrientationSetting = 8;\n                } else if (string.equals(\"sensorPortrait\")) {\n                    this.myInitialOrientationSetting = 7;\n                } else if (string.equals(\"sensorLandscape\")) {\n                    this.myInitialOrientationSetting = 6;\n                } else if (string != null) {\n                    this.myInitialOrientationSetting = -1;\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        this.myInitialOrientationSetting = screenOrientationFilter(this.myInitialOrientationSetting);\n        logOrientation(this.myInitialOrientationSetting);\n        setRequestedOrientation(this.myInitialOrientationSetting);\n        if (needManualOrientationHandling()) {\n            this.fAutoRotateObserver = new ContentObserver(null) { // from class: com.ansca.corona.CoronaActivity.1\n                @Override // android.database.ContentObserver\n                public void onChange(boolean z) {\n                    super.onChange(z);\n                    if (Settings.System.getInt(CoronaActivity.this.getContentResolver(), \"accelerometer_rotation\", 0) == 0) {\n                        if (CoronaActivity.this.myIsActivityResumed) {\n                            if (CoronaActivity.this.fController.getSystemMonitor() != null && CoronaActivity.this.fController.getSystemMonitor().isScreenUnlocked()) {\n                                CoronaActivity.this.lockCurrentOrientation();\n                                return;\n                            } else if ((CoronaActivity.this.isAtPortraitOrientation() && !CoronaActivity.this.supportsPortraitOrientation()) || (CoronaActivity.this.isAtLandscapeOrientation() && !CoronaActivity.this.supportsLandscapeOrientation())) {\n                                CoronaActivity coronaActivity = CoronaActivity.this;\n                                coronaActivity.lockOrientation(coronaActivity.getLoggedOrientation());\n                                return;\n                            } else {\n                                CoronaActivity.this.lockCurrentOrientation();\n                                return;\n                            }\n                        }\n                        return;\n                    }\n                    CoronaActivity.this.restoreInitialOrientationSetting();\n                }\n            };\n        }\n    }\n\n    boolean needManualOrientationHandling() {\n        int i = this.myInitialOrientationSetting;\n        return i == 6 || i == 7;\n    }\n\n    /* JADX WARN: Removed duplicated region for block: B:18:0x0041 A[RETURN, SYNTHETIC] */\n    /* JADX WARN: Removed duplicated region for block: B:25:0x004c A[ORIG_RETURN, RETURN] */\n    /*\n        Code decompiled incorrectly, please refer to instructions dump.\n        To view partially-correct add '--show-bad-code' argument\n    */\n    int getCurrentOrientation() {\n        /*\n            r8 = this;\n            java.lang.String r0 = \"window\"\n            java.lang.Object r0 = r8.getSystemService(r0)\n            android.view.WindowManager r0 = (android.view.WindowManager) r0\n            android.view.Display r0 = r0.getDefaultDisplay()\n            int r1 = r0.getRotation()\n            int r2 = r0.getWidth()\n            int r3 = r0.getHeight()\n            r4 = 3\n            r5 = 2\n            r6 = 0\n            r7 = 1\n            if (r2 > r3) goto L22\n            if (r1 == 0) goto L30\n            if (r1 == r5) goto L30\n        L22:\n            int r2 = r0.getWidth()\n            int r0 = r0.getHeight()\n            if (r2 <= r0) goto L32\n            if (r1 == r7) goto L30\n            if (r1 != r4) goto L32\n        L30:\n            r0 = 1\n            goto L33\n        L32:\n            r0 = 0\n        L33:\n            r2 = 8\n            r3 = 9\n            if (r1 == r7) goto L49\n            if (r1 == r5) goto L46\n            if (r1 == r4) goto L43\n            if (r0 == 0) goto L41\n        L3f:\n            r2 = 1\n            goto L4e\n        L41:\n            r2 = 0\n            goto L4e\n        L43:\n            if (r0 == 0) goto L3f\n            goto L4e\n        L46:\n            if (r0 == 0) goto L4e\n            goto L4c\n        L49:\n            if (r0 == 0) goto L4c\n            goto L41\n        L4c:\n            r2 = 9\n        L4e:\n            return r2\n        */\n        throw new UnsupportedOperationException(\"Method not decompiled: com.ansca.corona.CoronaActivity.getCurrentOrientation():int\");\n    }\n\n    int getLoggedOrientation() {\n        return this.fLoggedOrientation;\n    }\n\n    void logOrientation(int i) {\n        this.fLoggedOrientation = i;\n    }\n\n    void logCurrentOrientation() {\n        logOrientation(getCurrentOrientation());\n    }\n\n    boolean isAtPortraitOrientation() {\n        int currentOrientation = getCurrentOrientation();\n        return currentOrientation == 1 || currentOrientation == 9;\n    }\n\n    public boolean supportsPortraitOrientation() {\n        int i = this.myInitialOrientationSetting;\n        return i == -1 || i == 1 || i == 4 || i == 7 || i == 9 || i == 10 || i == 12 || i == 13;\n    }\n\n    boolean isAtLandscapeOrientation() {\n        int currentOrientation = getCurrentOrientation();\n        return currentOrientation == 0 || currentOrientation == 8;\n    }\n\n    public boolean supportsLandscapeOrientation() {\n        int i = this.myInitialOrientationSetting;\n        return i == -1 || i == 0 || i == 4 || i == 6 || i == 8 || i == 13 || i == 10 || i == 11;\n    }\n\n    public int getOrientationFromManifest() {\n        return this.myInitialOrientationSetting;\n    }\n\n    @Override // android.app.Activity\n    public void setRequestedOrientation(int i) {\n        super.setRequestedOrientation(screenOrientationFilter(i));\n    }\n\n    void lockCurrentOrientation() {\n        if (this.myIsOrientationLocked) {\n            return;\n        }\n        logCurrentOrientation();\n        lockOrientation(getLoggedOrientation());\n    }\n\n    void lockOrientation(int i) {\n        if (this.myIsOrientationLocked) {\n            return;\n        }\n        logOrientation(i);\n        setRequestedOrientation(i);\n        this.myIsOrientationLocked = true;\n    }\n\n    void restoreInitialOrientationSetting() {\n        if (this.myIsOrientationLocked) {\n            setRequestedOrientation(this.myInitialOrientationSetting);\n            this.myIsOrientationLocked = false;\n        }\n    }\n\n    void syncPermissionStateForAllPermissions() {\n        PermissionsServices permissionsServices = new PermissionsServices(this);\n        String[] supportedPermissionGroups = permissionsServices.getSupportedPermissionGroups();\n        LinkedHashSet linkedHashSet = new LinkedHashSet();\n        for (String str : supportedPermissionGroups) {\n            String[] findAllPermissionsInManifestForGroup = permissionsServices.findAllPermissionsInManifestForGroup(str);\n            if (findAllPermissionsInManifestForGroup != null && findAllPermissionsInManifestForGroup.length > 1) {\n                boolean z = false;\n                boolean z2 = false;\n                for (int i = 0; i < findAllPermissionsInManifestForGroup.length; i++) {\n                    int i2 = AnonymousClass5.$SwitchMap$com$ansca$corona$permissions$PermissionState[permissionsServices.getPermissionStateFor(findAllPermissionsInManifestForGroup[i]).ordinal()];\n                    if (i2 == 1) {\n                        if (z) {\n                            linkedHashSet.add(findAllPermissionsInManifestForGroup[i]);\n                        }\n                        z2 = true;\n                    } else if (i2 == 2) {\n                        if (z2) {\n                            linkedHashSet.add(findAllPermissionsInManifestForGroup[i]);\n                        }\n                        z = true;\n                    }\n                }\n            }\n        }\n        if (linkedHashSet.isEmpty()) {\n            return;\n        }\n        permissionsServices.requestPermissions(new PermissionsSettings(linkedHashSet), new DefaultRequestPermissionsResultHandler());\n    }\n\n    /* JADX INFO: Access modifiers changed from: package-private */\n    /* renamed from: com.ansca.corona.CoronaActivity$5  reason: invalid class name */\n    /* loaded from: classes.dex */\n    public static /* synthetic */ class AnonymousClass5 {\n        static final /* synthetic */ int[] $SwitchMap$com$ansca$corona$permissions$PermissionState = new int[PermissionState.values().length];\n\n        static {\n            try {\n                $SwitchMap$com$ansca$corona$permissions$PermissionState[PermissionState.GRANTED.ordinal()] = 1;\n            } catch (NoSuchFieldError unused) {\n            }\n            try {\n                $SwitchMap$com$ansca$corona$permissions$PermissionState[PermissionState.DENIED.ordinal()] = 2;\n            } catch (NoSuchFieldError unused2) {\n            }\n            try {\n                $SwitchMap$com$ansca$corona$permissions$PermissionState[PermissionState.MISSING.ordinal()] = 3;\n            } catch (NoSuchFieldError unused3) {\n            }\n        }\n    }\n\n    CoronaGLSurfaceView getGLView() {\n        return this.myGLView;\n    }\n\n    public FrameLayout getOverlayView() {\n        ViewManager viewManager = this.fCoronaRuntime.getViewManager();\n        if (viewManager == null) {\n            return null;\n        }\n        return viewManager.getOverlayView();\n    }\n\n    public Intent getInitialIntent() {\n        return this.myInitialIntent;\n    }\n\n    @Override // android.app.Activity\n    public Intent getIntent() {\n        return super.getIntent();\n    }\n\n    public int getHorizontalMarginInPixels() {\n        return JavaToNativeShim.getHorizontalMarginInPixels(this.fCoronaRuntime);\n    }\n\n    public int getVerticalMarginInPixels() {\n        return JavaToNativeShim.getVerticalMarginInPixels(this.fCoronaRuntime);\n    }\n\n    public int getContentWidthInPixels() {\n        return JavaToNativeShim.getContentWidthInPixels(this.fCoronaRuntime);\n    }\n\n    public int getContentHeightInPixels() {\n        return JavaToNativeShim.getContentHeightInPixels(this.fCoronaRuntime);\n    }\n\n    public Point convertCoronaPointToAndroidPoint(int i, int i2) {\n        return JavaToNativeShim.convertCoronaPointToAndroidPoint(this.fCoronaRuntime, i, i2);\n    }\n\n    public Handler getHandler() {\n        return this.myHandler;\n    }\n\n    public CoronaRuntimeTaskDispatcher getRuntimeTaskDispatcher() {\n        return this.myRuntimeTaskDispatcher;\n    }\n\n    /* JADX INFO: Access modifiers changed from: package-private */\n    /* JADX WARN: Removed duplicated region for block: B:49:0x00a1  */\n    /* JADX WARN: Removed duplicated region for block: B:53:0x00b5  */\n    /* JADX WARN: Removed duplicated region for block: B:57:0x00bf  */\n    /*\n        Code decompiled incorrectly, please refer to instructions dump.\n        To view partially-correct add '--show-bad-code' argument\n    */\n    public void setStatusBarMode(com.ansca.corona.CoronaStatusBarSettings r6) {\n        /*\n            r5 = this;\n            com.ansca.corona.CoronaStatusBarSettings r0 = r5.myStatusBarMode\n            if (r6 != r0) goto L5\n            return\n        L5:\n            int r0 = android.os.Build.VERSION.SDK_INT\n            r1 = 28\n            if (r0 < r1) goto L1b\n            android.view.Window r0 = r5.getWindow()\n            android.view.View r0 = r0.getDecorView()\n            com.ansca.corona.CoronaActivity$2 r2 = new com.ansca.corona.CoronaActivity$2\n            r2.<init>()\n            r0.setOnApplyWindowInsetsListener(r2)\n        L1b:\n            com.ansca.corona.CoronaStatusBarSettings r0 = com.ansca.corona.CoronaStatusBarSettings.HIDDEN\n            r2 = 1\n            r3 = 2048(0x800, float:2.87E-42)\n            r4 = 1024(0x400, float:1.435E-42)\n            if (r6 != r0) goto L42\n            android.view.Window r0 = r5.getWindow()\n            r0.addFlags(r4)\n            android.view.Window r0 = r5.getWindow()\n            r0.clearFlags(r3)\n            int r0 = android.os.Build.VERSION.SDK_INT\n            if (r0 < r1) goto Ld4\n            android.view.Window r0 = r5.getWindow()\n            android.view.WindowManager$LayoutParams r0 = r0.getAttributes()\n            r0.layoutInDisplayCutoutMode = r2\n            goto Ld4\n        L42:\n            com.ansca.corona.CoronaStatusBarSettings r0 = com.ansca.corona.CoronaStatusBarSettings.DEFAULT\n            if (r6 == r0) goto L58\n            com.ansca.corona.CoronaStatusBarSettings r0 = com.ansca.corona.CoronaStatusBarSettings.TRANSLUCENT\n            if (r6 == r0) goto L58\n            com.ansca.corona.CoronaStatusBarSettings r0 = com.ansca.corona.CoronaStatusBarSettings.DARK\n            if (r6 == r0) goto L58\n            com.ansca.corona.CoronaStatusBarSettings r0 = com.ansca.corona.CoronaStatusBarSettings.LIGHT_TRANSPARENT\n            if (r6 == r0) goto L58\n            com.ansca.corona.CoronaStatusBarSettings r0 = com.ansca.corona.CoronaStatusBarSettings.DARK_TRANSPARENT\n            if (r6 != r0) goto L57\n            goto L58\n        L57:\n            return\n        L58:\n            com.ansca.corona.CoronaStatusBarSettings r0 = r5.myStatusBarMode\n            com.ansca.corona.CoronaStatusBarSettings r1 = com.ansca.corona.CoronaStatusBarSettings.HIDDEN\n            if (r0 != r1) goto L6c\n            android.view.Window r0 = r5.getWindow()\n            r0.addFlags(r3)\n            android.view.Window r0 = r5.getWindow()\n            r0.clearFlags(r4)\n        L6c:\n            int r0 = android.os.Build.VERSION.SDK_INT\n            r1 = 23\n            if (r0 < r1) goto L89\n            com.ansca.corona.graphics.opengl.CoronaGLSurfaceView r0 = r5.myGLView\n            if (r0 == 0) goto L89\n            int r0 = r0.getSystemUiVisibility()\n            com.ansca.corona.CoronaStatusBarSettings r1 = com.ansca.corona.CoronaStatusBarSettings.DARK_TRANSPARENT\n            if (r6 != r1) goto L81\n            r0 = r0 | 8192(0x2000, float:1.148E-41)\n            goto L83\n        L81:\n            r0 = r0 & (-8193(0xffffffffffffdfff, float:NaN))\n        L83:\n            com.ansca.corona.graphics.opengl.CoronaGLSurfaceView r1 = r5.myGLView\n            r1.setSystemUiVisibility(r0)\n            goto L90\n        L89:\n            com.ansca.corona.CoronaStatusBarSettings r0 = com.ansca.corona.CoronaStatusBarSettings.DARK_TRANSPARENT\n            if (r6 != r0) goto L90\n            com.ansca.corona.CoronaStatusBarSettings r0 = com.ansca.corona.CoronaStatusBarSettings.LIGHT_TRANSPARENT\n            goto L91\n        L90:\n            r0 = r6\n        L91:\n            com.ansca.corona.CoronaStatusBarSettings r1 = com.ansca.corona.CoronaStatusBarSettings.LIGHT_TRANSPARENT\n            if (r0 == r1) goto L9b\n            com.ansca.corona.CoronaStatusBarSettings r1 = com.ansca.corona.CoronaStatusBarSettings.DARK_TRANSPARENT\n            if (r0 != r1) goto L9a\n            goto L9b\n        L9a:\n            r2 = 0\n        L9b:\n            int r1 = android.os.Build.VERSION.SDK_INT\n            r3 = 21\n            if (r1 < r3) goto Lb5\n            r1 = -2147483648(0xffffffff80000000, float:-0.0)\n            if (r2 == 0) goto Lad\n            android.view.Window r2 = r5.getWindow()\n            r2.addFlags(r1)\n            goto Lb9\n        Lad:\n            android.view.Window r2 = r5.getWindow()\n            r2.clearFlags(r1)\n            goto Lb9\n        Lb5:\n            if (r2 == 0) goto Lb9\n            com.ansca.corona.CoronaStatusBarSettings r0 = com.ansca.corona.CoronaStatusBarSettings.TRANSLUCENT\n        Lb9:\n            int r1 = android.os.Build.VERSION.SDK_INT\n            r2 = 19\n            if (r1 < r2) goto Ld4\n            com.ansca.corona.CoronaStatusBarSettings r1 = com.ansca.corona.CoronaStatusBarSettings.TRANSLUCENT\n            r2 = 67108864(0x4000000, float:1.5046328E-36)\n            if (r0 != r1) goto Lcd\n            android.view.Window r0 = r5.getWindow()\n            r0.addFlags(r2)\n            goto Ld4\n        Lcd:\n            android.view.Window r0 = r5.getWindow()\n            r0.clearFlags(r2)\n        Ld4:\n            r5.myStatusBarMode = r6\n            return\n        */\n        throw new UnsupportedOperationException(\"Method not decompiled: com.ansca.corona.CoronaActivity.setStatusBarMode(com.ansca.corona.CoronaStatusBarSettings):void\");\n    }\n\n    /* JADX INFO: Access modifiers changed from: package-private */\n    public CoronaStatusBarSettings getStatusBarMode() {\n        return this.myStatusBarMode;\n    }\n\n    public DisplayCutout getDisplayCutout() {\n        return this.fDisplayCutout;\n    }\n\n    /* JADX INFO: Access modifiers changed from: package-private */\n    public int getStatusBarHeight() {\n        String lowerCase = Build.MANUFACTURER.toLowerCase();\n        UiModeManager uiModeManager = (UiModeManager) getSystemService(\"uimode\");\n        uiModeManager.getCurrentModeType();\n        if (uiModeManager.getCurrentModeType() == 4) {\n            return 0;\n        }\n        if (lowerCase.contains(StoreName.AMAZON)) {\n            return getStatusBarHeightForAmazonDevices();\n        }\n        if (Build.MODEL.toLowerCase().contains(\"gamestick\")) {\n            return 0;\n        }\n        if (lowerCase.contains(\"barnes\") && lowerCase.contains(\"noble\")) {\n            return 0;\n        }\n        if (Build.VERSION.SDK_INT < 11 || Build.VERSION.SDK_INT > 13) {\n            return resolveStatusBarHeight();\n        }\n        return 0;\n    }\n\n    public boolean IsAndroidTV() {\n        return ((UiModeManager) getSystemService(\"uimode\")).getCurrentModeType() == 4;\n    }\n\n    public boolean HasSoftwareKeys() {\n        if (Build.VERSION.SDK_INT >= 17) {\n            Display defaultDisplay = getWindowManager().getDefaultDisplay();\n            DisplayMetrics displayMetrics = new DisplayMetrics();\n            defaultDisplay.getRealMetrics(displayMetrics);\n            int i = displayMetrics.heightPixels;\n            int i2 = displayMetrics.widthPixels;\n            DisplayMetrics displayMetrics2 = new DisplayMetrics();\n            defaultDisplay.getMetrics(displayMetrics2);\n            int i3 = displayMetrics2.heightPixels;\n            if (i2 - displayMetrics2.widthPixels > 0 || i - i3 > 0) {\n                return true;\n            }\n        } else {\n            boolean hasPermanentMenuKey = ViewConfiguration.get(CoronaEnvironment.getApplicationContext()).hasPermanentMenuKey();\n            boolean deviceHasKey = KeyCharacterMap.deviceHasKey(4);\n            if (!hasPermanentMenuKey && !deviceHasKey) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    int getStatusBarHeightForAmazonDevices() {\n        if (!Build.MODEL.equals(\"Kindle Fire\")) {\n            if (Build.MODEL.equals(\"KFOT\")) {\n                return 27;\n            }\n            if (Build.MODEL.equals(\"KFTT\")) {\n                return 35;\n            }\n            if (!Build.MODEL.equals(\"KFJWI\") && !Build.MODEL.equals(\"KFJWA\")) {\n                if (!Build.MODEL.equals(\"KFSOWI\")) {\n                    if (Build.MODEL.equals(\"KFTHWA\") || Build.MODEL.equals(\"KFTHWI\")) {\n                        return 51;\n                    }\n                    if (Build.MODEL.equals(\"KFAPWA\") || Build.MODEL.equals(\"KFAPWI\")) {\n                        return 53;\n                    }\n                    if ((!Build.MODEL.equals(\"KFARWI\") || Build.VERSION.SDK_INT != 19) && !Build.MODEL.equals(\"KFASWI\")) {\n                        if (Build.MODEL.equals(\"KFSAWA\") || Build.MODEL.equals(\"KFSAWI\")) {\n                            return 51;\n                        }\n                        return resolveStatusBarHeight();\n                    }\n                }\n                return 34;\n            }\n        }\n        return 40;\n    }\n\n    int resolveStatusBarHeight() {\n        int identifier = getResources().getIdentifier(\"status_bar_height\", \"dimen\", Constants.PLATFORM);\n        if (identifier > 0) {\n            return getResources().getDimensionPixelSize(identifier);\n        }\n        return (int) ((getUnscaledStatusBarHeight() * (getResources().getDisplayMetrics().densityDpi / 160.0d)) + 0.5d);\n    }\n\n    /* JADX INFO: Access modifiers changed from: package-private */\n    public int resolveNavBarHeight() {\n        int identifier = getResources().getIdentifier(\"navigation_bar_height\", \"dimen\", Constants.PLATFORM);\n        if (identifier > 0) {\n            return getResources().getDimensionPixelSize(identifier);\n        }\n        return 0;\n    }\n\n    double getUnscaledStatusBarHeight() {\n        return ((!Build.MANUFACTURER.toLowerCase().contains(StoreName.AMAZON) || Build.VERSION.SDK_INT < 22) && Build.VERSION.SDK_INT < 23) ? 25.0d : 24.0d;\n    }\n\n    /* JADX INFO: Access modifiers changed from: package-private */\n    public StoreProxy getStore() {\n        return this.myStore;\n    }\n\n    private int registerResultHandler(ResultHandler resultHandler, HashMap<Integer, ResultHandler> hashMap) {\n        if (resultHandler == null || hashMap == null) {\n            return -1;\n        }\n        while (true) {\n            int i = 1;\n            while (hashMap.containsKey(Integer.valueOf(i))) {\n                i++;\n                if (i < 1) {\n                    break;\n                }\n            }\n            hashMap.put(Integer.valueOf(i), resultHandler);\n            return i;\n        }\n    }\n\n    private int registerResultHandler(ResultHandler resultHandler, int i, HashMap<Integer, ResultHandler> hashMap) {\n        if (resultHandler != null) {\n            if (i < 1 || hashMap == null) {\n                return -1;\n            }\n            int intValue = hashMap.isEmpty() ? 1 : 1 + ((Integer) new TreeSet(hashMap.keySet()).last()).intValue();\n            for (int i2 = intValue; i2 < intValue + i; i2++) {\n                hashMap.put(Integer.valueOf(i2), resultHandler);\n            }\n            return intValue;\n        }\n        return -1;\n    }\n\n    private ArrayList<Integer> unregisterResultHandler(ResultHandler resultHandler, HashMap<Integer, ResultHandler> hashMap) {\n        if (resultHandler == null || hashMap == null) {\n            return null;\n        }\n        ArrayList<Integer> arrayList = new ArrayList<>();\n        for (Map.Entry<Integer, ResultHandler> entry : hashMap.entrySet()) {\n            if (entry.getValue() == resultHandler) {\n                arrayList.add(entry.getKey());\n            }\n        }\n        Iterator<Integer> it = arrayList.iterator();\n        while (it.hasNext()) {\n            hashMap.remove(it.next());\n        }\n        return arrayList;\n    }\n\n    public int registerActivityResultHandler(OnActivityResultHandler onActivityResultHandler) {\n        return registerResultHandler(onActivityResultHandler, this.fActivityResultHandlers);\n    }\n\n    public int registerActivityResultHandler(OnActivityResultHandler onActivityResultHandler, int i) {\n        return registerResultHandler(onActivityResultHandler, i, this.fActivityResultHandlers);\n    }\n\n    public void unregisterActivityResultHandler(OnActivityResultHandler onActivityResultHandler) {\n        unregisterResultHandler(onActivityResultHandler, this.fActivityResultHandlers);\n    }\n\n    public void registerNewIntentResultHandler(OnNewIntentResultHandler onNewIntentResultHandler) {\n        this.fNewIntentResultHandlers.add(onNewIntentResultHandler);\n    }\n\n    public void unregisterNewIntentResultHandler(OnActivityResultHandler onActivityResultHandler) {\n        this.fNewIntentResultHandlers.remove(onActivityResultHandler);\n    }\n\n    public int registerRequestPermissionsResultHandler(OnRequestPermissionsResultHandler onRequestPermissionsResultHandler) {\n        if (Build.VERSION.SDK_INT >= 23) {\n            return registerResultHandler(onRequestPermissionsResultHandler, this.fRequestPermissionsResultHandlers);\n        }\n        return 0;\n    }\n\n    public int registerRequestPermissionsResultHandler(OnRequestPermissionsResultHandler onRequestPermissionsResultHandler, PermissionsSettings permissionsSettings) {\n        int registerRequestPermissionsResultHandler = registerRequestPermissionsResultHandler(onRequestPermissionsResultHandler);\n        if (registerRequestPermissionsResultHandler > 0) {\n            PermissionsSettings.getSettingsToBeServiced().put(Integer.valueOf(registerRequestPermissionsResultHandler), permissionsSettings);\n        }\n        return registerRequestPermissionsResultHandler;\n    }\n\n    public int registerRequestPermissionsResultHandler(OnRequestPermissionsResultHandler onRequestPermissionsResultHandler, int i) {\n        if (Build.VERSION.SDK_INT >= 23) {\n            return registerResultHandler(onRequestPermissionsResultHandler, i, this.fRequestPermissionsResultHandlers);\n        }\n        return 0;\n    }\n\n    public int registerRequestPermissionsResultHandler(OnRequestPermissionsResultHandler onRequestPermissionsResultHandler, int i, PermissionsSettings permissionsSettings) {\n        int registerRequestPermissionsResultHandler = registerRequestPermissionsResultHandler(onRequestPermissionsResultHandler);\n        if (registerRequestPermissionsResultHandler > 0) {\n            for (int i2 = registerRequestPermissionsResultHandler; i2 < registerRequestPermissionsResultHandler + i; i2++) {\n                PermissionsSettings.getSettingsToBeServiced().put(Integer.valueOf(i2), permissionsSettings);\n            }\n        }\n        return registerRequestPermissionsResultHandler;\n    }\n\n    public PermissionsSettings unregisterRequestPermissionsResultHandler(OnRequestPermissionsResultHandler onRequestPermissionsResultHandler) {\n        ArrayList<Integer> unregisterResultHandler = unregisterResultHandler(onRequestPermissionsResultHandler, this.fRequestPermissionsResultHandlers);\n        PermissionsSettings permissionsSettings = null;\n        if (unregisterResultHandler != null && !unregisterResultHandler.isEmpty()) {\n            Iterator<Integer> it = unregisterResultHandler.iterator();\n            while (it.hasNext()) {\n                permissionsSettings = PermissionsSettings.getSettingsToBeServiced().remove(it.next());\n            }\n        }\n        return permissionsSettings;\n    }\n\n    @Override // android.app.Activity\n    protected void onDestroy() {\n        CameraActivity.clearCachedPhotos(this);\n        this.fEventHandler.dispose();\n        this.myGLView.requestExitAndWait();\n        this.myGLView = null;\n        this.myStore.disable();\n        this.fSplashView = null;\n        this.fCoronaRuntime.dispose();\n        this.fCoronaRuntime = null;\n        CoronaEnvironment.setCoronaActivity(null);\n        super.onDestroy();\n    }\n\n    @Override // android.app.Activity\n    protected void onStart() {\n        super.onStart();\n    }\n\n    @Override // android.app.Activity\n    protected void onResume() {\n        super.onResume();\n        if (needManualOrientationHandling()) {\n            getContentResolver().registerContentObserver(Settings.System.getUriFor(\"accelerometer_rotation\"), false, this.fAutoRotateObserver);\n            if (Settings.System.getInt(getContentResolver(), \"accelerometer_rotation\", 0) == 0) {\n                if ((isAtPortraitOrientation() && !supportsPortraitOrientation()) || (isAtLandscapeOrientation() && !supportsLandscapeOrientation())) {\n                    lockOrientation(getLoggedOrientation());\n                } else {\n                    lockCurrentOrientation();\n                }\n            } else {\n                restoreInitialOrientationSetting();\n            }\n        }\n        this.myIsActivityResumed = true;\n        requestResumeCoronaRuntime();\n        CoronaRuntime coronaRuntime = this.fCoronaRuntime;\n        if (coronaRuntime != null) {\n            coronaRuntime.updateViews();\n        }\n    }\n\n    @Override // android.app.Activity\n    protected void onPause() {\n        super.onPause();\n        if (needManualOrientationHandling()) {\n            logCurrentOrientation();\n            getContentResolver().unregisterContentObserver(this.fAutoRotateObserver);\n        }\n        this.myIsActivityResumed = false;\n        requestSuspendCoronaRuntime();\n    }\n\n    @Override // android.app.Activity\n    protected void onStop() {\n        super.onStop();\n    }\n\n    @Override // android.app.Activity\n    protected void onNewIntent(Intent intent) {\n        super.onNewIntent(intent);\n        if (intent == null || this.fCoronaRuntime == null) {\n            return;\n        }\n        Bundle extras = intent.getExtras();\n        if ((intent.getData() != null || ((extras != null && extras.size() > 0) || !(intent.getAction() == null || intent.getAction().equals(\"android.intent.action.MAIN\")))) && !intent.hasExtra(NotificationReceivedTask.NAME)) {\n            setIntent(intent);\n            EventManager eventManager = this.fCoronaRuntime.getController().getEventManager();\n            if (eventManager != null) {\n                eventManager.addEvent(new RunnableEvent(new Runnable() { // from class: com.ansca.corona.CoronaActivity.3\n                    @Override // java.lang.Runnable\n                    public void run() {\n                        JavaToNativeShim.applicationOpenEvent(CoronaActivity.this.fCoronaRuntime);\n                    }\n                }));\n            }\n            Iterator<OnNewIntentResultHandler> it = this.fNewIntentResultHandlers.iterator();\n            while (it.hasNext()) {\n                it.next().onHandleNewIntentResult(intent);\n            }\n        }\n    }\n\n    @Override // android.app.Activity, android.view.Window.Callback\n    public void onWindowFocusChanged(boolean z) {\n        super.onWindowFocusChanged(z);\n    }\n\n    /* JADX INFO: Access modifiers changed from: package-private */\n    public void onScreenLockStateChanged(boolean z) {\n        if (this.myIsActivityResumed) {\n            this.fCoronaRuntime.updateViews();\n        }\n        requestResumeCoronaRuntime();\n    }\n\n    @Override // android.app.Activity, android.content.ComponentCallbacks\n    public void onConfigurationChanged(Configuration configuration) {\n        super.onConfigurationChanged(configuration);\n        if (isSplashScreenShown()) {\n            showSplashScreen();\n        }\n    }\n\n    private void requestResumeCoronaRuntime() {\n        if (this.myIsActivityResumed) {\n            Controller controller = this.fController;\n            if (controller == null) {\n                Log.i(\"Corona\", \"ERROR: CoronaActivity.requestResumeCoronaRuntime(): Can't resume the CoronaRuntime because our Controller died!\");\n                return;\n            }\n            SystemMonitor systemMonitor = controller.getSystemMonitor();\n            if (systemMonitor == null || !systemMonitor.isScreenLocked()) {\n                this.fController.start();\n                CoronaGLSurfaceView coronaGLSurfaceView = this.myGLView;\n                if (coronaGLSurfaceView != null) {\n                    coronaGLSurfaceView.onResumeCoronaRuntime();\n                }\n                CoronaRuntime coronaRuntime = this.fCoronaRuntime;\n                ViewManager viewManager = coronaRuntime != null ? coronaRuntime.getViewManager() : null;\n                if (viewManager != null) {\n                    viewManager.resume();\n                } else {\n                    Log.i(\"Corona\", \"ERROR: CoronaActivity.onResume(): Can't resume the CoronaActivity's views since there's no ViewManager!\");\n                }\n            }\n        }\n    }\n\n    private void requestSuspendCoronaRuntime() {\n        Controller controller = this.fController;\n        if (controller != null) {\n            controller.stop();\n        } else {\n            Log.i(\"Corona\", \"ERROR: CoronaActivity.requestSuspendCoronaRuntime(): Can't suspend the CoronaRuntime because our Controller died!\");\n        }\n        CoronaGLSurfaceView coronaGLSurfaceView = this.myGLView;\n        if (coronaGLSurfaceView != null) {\n            coronaGLSurfaceView.onSuspendCoronaRuntime();\n        }\n        CoronaRuntime coronaRuntime = this.fCoronaRuntime;\n        ViewManager viewManager = coronaRuntime != null ? coronaRuntime.getViewManager() : null;\n        if (viewManager != null) {\n            viewManager.suspend();\n        } else {\n            Log.i(\"Corona\", \"ERROR: CoronaActivity.onPause(): Can't suspend the CoronaActivity's views since there's no ViewManager!\");\n        }\n    }\n\n    void showCoronaSplashScreen() {\n        int height;\n        int width;\n        if (Runtime.getRuntime().maxMemory() <= 33554432) {\n            Log.v(\"Corona\", \"Not enough memory to show splash screen\");\n            return;\n        }\n        Context applicationContext = CoronaEnvironment.getApplicationContext();\n        Resources resources = applicationContext.getResources();\n        FileServices fileServices = new FileServices(applicationContext);\n        int i = 0;\n        if (fileServices.doesResourceFileExist(\"drawable/_corona_splash_screen.png\") || fileServices.doesResourceFileExist(\"drawable/_corona_splash_screen.jpg\")) {\n            ViewManager viewManager = this.fCoronaRuntime.getViewManager();\n            try {\n                i = resources.getIdentifier(\"_corona_splash_screen\", \"drawable\", applicationContext.getPackageName());\n            } catch (Exception e) {\n                Log.v(\"Corona\", \"showCoronaSplashScreen load EXCEPTION: \" + e);\n            }\n            if (i != 0) {\n                try {\n                    this.fSplashView = new LinearLayout(this);\n                    this.fSplashView.setOrientation(1);\n                    this.fSplashView.setBackgroundColor(ViewCompat.MEASURED_STATE_MASK);\n                    ImageView imageView = new ImageView(this);\n                    imageView.setScaleType(ImageView.ScaleType.CENTER);\n                    Display defaultDisplay = ((WindowManager) getSystemService(\"window\")).getDefaultDisplay();\n                    Bitmap decodeResource = BitmapFactory.decodeResource(resources, i);\n                    if (defaultDisplay.getWidth() >= decodeResource.getWidth() && defaultDisplay.getHeight() >= decodeResource.getHeight()) {\n                        imageView.setImageBitmap(decodeResource);\n                    } else {\n                        double width2 = defaultDisplay.getWidth() / decodeResource.getWidth();\n                        double height2 = defaultDisplay.getHeight() / decodeResource.getHeight();\n                        if (height2 > width2) {\n                            width = (int) (decodeResource.getWidth() * width2);\n                            height = (int) (decodeResource.getHeight() * width2);\n                        } else {\n                            height = (int) (decodeResource.getHeight() * height2);\n                            width = (int) (decodeResource.getWidth() * height2);\n                        }\n                        imageView.setImageBitmap(Bitmap.createScaledBitmap(decodeResource, width, height, true));\n                    }\n                    FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(-1, -1, 17);\n                    imageView.setLayoutParams(layoutParams);\n                    this.fSplashView.addView(imageView);\n                    viewManager.getContentView().addView(this.fSplashView, layoutParams);\n                } catch (Exception e2) {\n                    Log.v(\"Corona\", \"showCoronaSplashScreen display EXCEPTION: \" + e2);\n                }\n            }\n        }\n    }\n\n    /* JADX INFO: Access modifiers changed from: package-private */\n    public void hideSplashScreen() {\n        if (this.fSplashView != null) {\n            long currentTimeMillis = this.SPLASH_SCREEN_DURATION - (System.currentTimeMillis() - this.fStartTime);\n            if (currentTimeMillis > 0) {\n                try {\n                    synchronized (this) {\n                        wait(currentTimeMillis);\n                    }\n                } catch (InterruptedException unused) {\n                }\n            }\n            AlphaAnimation alphaAnimation = new AlphaAnimation(1.0f, 0.0f);\n            alphaAnimation.setDuration(500L);\n            this.fSplashView.startAnimation(alphaAnimation);\n            final LinearLayout linearLayout = this.fSplashView;\n            this.fSplashView = null;\n            linearLayout.postDelayed(new Runnable() { // from class: com.ansca.corona.CoronaActivity.4\n                @Override // java.lang.Runnable\n                public void run() {\n                    ViewGroup viewGroup = (ViewGroup) linearLayout.getParent();\n                    if (viewGroup != null) {\n                        viewGroup.removeView(linearLayout);\n                    }\n                }\n            }, 500L);\n        }\n    }\n\n    /* JADX INFO: Access modifiers changed from: private */\n    public static int getDurationOfVideo(String str) {\n        MediaPlayer create;\n        int i = -1;\n        try {\n            Context applicationContext = CoronaEnvironment.getApplicationContext();\n            if (applicationContext == null || (create = MediaPlayer.create(applicationContext, Uri.parse(str))) == null) {\n                return -1;\n            }\n            i = create.getDuration();\n            create.release();\n            return i;\n        } catch (Exception unused) {\n            return i;\n        }\n    }\n\n    boolean isSplashScreenShown() {\n        return this.fSplashView != null;\n    }\n\n    /* JADX INFO: Access modifiers changed from: package-private */\n    public void showSelectImageWindowUsing(String str) {\n        SelectImageActivityResultHandler selectImageActivityResultHandler = new SelectImageActivityResultHandler(this.fCoronaRuntime);\n        selectImageActivityResultHandler.setDestinationFilePath(str);\n        int registerActivityResultHandler = registerActivityResultHandler(selectImageActivityResultHandler);\n        Intent intent = new Intent(\"android.intent.action.GET_CONTENT\");\n        intent.setType(\"image/*\");\n        startActivityForResult(Intent.createChooser(intent, \"\"), registerActivityResultHandler);\n    }\n\n    /* JADX INFO: Access modifiers changed from: package-private */\n    public void showSelectVideoWindow() {\n        if (Build.VERSION.SDK_INT >= 16) {\n            PermissionsServices permissionsServices = new PermissionsServices(CoronaEnvironment.getApplicationContext());\n            int i = AnonymousClass5.$SwitchMap$com$ansca$corona$permissions$PermissionState[permissionsServices.getPermissionStateFor(PermissionsServices.Permission.READ_EXTERNAL_STORAGE).ordinal()];\n            if (i == 2) {\n                if (!permissionsServices.shouldNeverAskAgain(PermissionsServices.Permission.READ_EXTERNAL_STORAGE)) {\n                    permissionsServices.requestPermissions(new PermissionsSettings(PermissionsServices.Permission.READ_EXTERNAL_STORAGE), new SelectVideoRequestPermissionsResultHandler(\"media.selectVideo()\"));\n                    return;\n                }\n                CoronaRuntime coronaRuntime = this.fCoronaRuntime;\n                if (coronaRuntime != null) {\n                    CoronaRuntimeTaskDispatcher taskDispatcher = coronaRuntime.getTaskDispatcher();\n                    if (taskDispatcher != null) {\n                        taskDispatcher.send(new VideoPickerTask());\n                        return;\n                    } else {\n                        Log.v(\"Corona\", \"media.selectVideo() cannot continue because there's no Corona Runtime Task Dispatcher!\");\n                        return;\n                    }\n                }\n                Log.v(\"Corona\", \"media.selectVideo() cannot continue because there's no Corona Runtime!\");\n                return;\n            } else if (i == 3) {\n                showPermissionMissingFromManifestAlert(PermissionsServices.Permission.READ_EXTERNAL_STORAGE, \"media.selectVideo() needs Storage access to handle all possible file paths a 3rd party Gallery app might provide!\");\n                return;\n            }\n        }\n        int registerActivityResultHandler = registerActivityResultHandler(new SelectVideoActivityResultHandler(this.fCoronaRuntime));\n        Intent intent = new Intent(\"android.intent.action.GET_CONTENT\");\n        intent.setType(\"video/*\");\n        startActivityForResult(Intent.createChooser(intent, \"\"), registerActivityResultHandler);\n    }\n\n    /* JADX INFO: Access modifiers changed from: private */\n    /* loaded from: classes.dex */\n    public static abstract class SelectMediaActivityResultHandler implements OnActivityResultHandler {\n        private CoronaRuntime fCoronaRuntime;\n        private String fDefaultExtention;\n        private String fDestinationFilePath = null;\n        protected String fGenericFileName;\n\n        protected abstract MediaPickerTask generateEvent(String str, int i, long j);\n\n        protected abstract String[] getColumns();\n\n        protected abstract String handleContentUri(Uri uri, File file, Context context, String str);\n\n        public SelectMediaActivityResultHandler(CoronaRuntime coronaRuntime, String str, String str2) {\n            this.fCoronaRuntime = coronaRuntime;\n            this.fDefaultExtention = str;\n            this.fGenericFileName = str2 + \" %d\";\n        }\n\n        public void setDestinationFilePath(String str) {\n            this.fDestinationFilePath = str;\n        }\n\n        @Override // com.ansca.corona.CoronaActivity.OnActivityResultHandler\n        public void onHandleActivityResult(CoronaActivity coronaActivity, int i, int i2, Intent intent) {\n            coronaActivity.unregisterActivityResultHandler(this);\n            final Uri data = intent != null ? intent.getData() : null;\n            String str = this.fDestinationFilePath;\n            final File file = (str == null || str.length() <= 0) ? null : new File(this.fDestinationFilePath);\n            this.fDestinationFilePath = null;\n            if (i2 != -1 || data == null) {\n                CoronaRuntime coronaRuntime = this.fCoronaRuntime;\n                if (coronaRuntime != null) {\n                    coronaRuntime.getTaskDispatcher().send(generateEvent(null, -1, -1L));\n                    return;\n                }\n                return;\n            }\n            new Thread(new Runnable() { // from class: com.ansca.corona.CoronaActivity.SelectMediaActivityResultHandler.1\n                /* JADX WARN: Unsupported multi-entry loop pattern (BACK_EDGE: B:20:0x0077 -> B:21:0x0078). Please submit an issue!!! */\n                @Override // java.lang.Runnable\n                public void run() {\n                    File file2;\n                    String str2;\n                    String scheme;\n                    Context applicationContext = CoronaEnvironment.getApplicationContext();\n                    if (applicationContext == null) {\n                        return;\n                    }\n                    FileServices fileServices = new FileServices(applicationContext);\n                    long j = -1;\n                    boolean z = false;\n                    try {\n                        scheme = data.getScheme();\n                    } catch (Exception unused) {\n                    }\n                    if (\"file\".equals(scheme)) {\n                        file2 = new File(data.getPath());\n                        try {\n                            if (file2.exists()) {\n                                j = file2.length();\n                            }\n                        } catch (Exception unused2) {\n                        }\n                    } else {\n                        if (\"content\".equals(scheme)) {\n                            try {\n                                String[] columns = SelectMediaActivityResultHandler.this.getColumns();\n                                Cursor query = applicationContext.getContentResolver().query(data, columns, null, null, null);\n                                query.moveToFirst();\n                                String string = query.getString(query.getColumnIndex(columns[0]));\n                                j = query.getLong(query.getColumnIndex(columns[1]));\n                                query.close();\n                                file2 = new File(string);\n                            } catch (Exception unused3) {\n                                file2 = null;\n                            }\n                            z = true;\n                        }\n                        file2 = null;\n                    }\n                    if (file2 != null) {\n                        str2 = fileServices.getExtensionFrom(file2);\n                        if (!file2.exists()) {\n                            file2 = null;\n                        }\n                    } else {\n                        str2 = null;\n                    }\n                    String str3 = \"\";\n                    if (file2 != null && file2.exists()) {\n                        File file3 = file;\n                        if (file3 != null) {\n                            if (fileServices.copyFile(file2, file3)) {\n                                str3 = file.getAbsolutePath();\n                            }\n                        } else {\n                            str3 = file2.getAbsolutePath();\n                        }\n                    } else if (z) {\n                        String str4 = SelectMediaActivityResultHandler.this.fDefaultExtention;\n                        if (str2 != null) {\n                            str4 = str2;\n                        }\n                        str3 = SelectMediaActivityResultHandler.this.handleContentUri(data, file, applicationContext, str4);\n                    }\n                    if (SelectMediaActivityResultHandler.this.fCoronaRuntime != null) {\n                        SelectMediaActivityResultHandler.this.fCoronaRuntime.getTaskDispatcher().send(SelectMediaActivityResultHandler.this.generateEvent(str3, CoronaActivity.getDurationOfVideo(str3), j));\n                    }\n                }\n            }).start();\n        }\n    }\n\n    /* JADX INFO: Access modifiers changed from: private */\n    /* loaded from: classes.dex */\n    public static class SelectImageActivityResultHandler extends SelectMediaActivityResultHandler {\n        public SelectImageActivityResultHandler(CoronaRuntime coronaRuntime) {\n            super(coronaRuntime, \"jpg\", \"Picture\");\n        }\n\n        @Override // com.ansca.corona.CoronaActivity.SelectMediaActivityResultHandler\n        protected MediaPickerTask generateEvent(String str, int i, long j) {\n            return new ImagePickerTask(str);\n        }\n\n        @Override // com.ansca.corona.CoronaActivity.SelectMediaActivityResultHandler\n        protected String[] getColumns() {\n            return new String[]{\"_data\", \"_size\"};\n        }\n\n        @Override // com.ansca.corona.CoronaActivity.SelectMediaActivityResultHandler\n        protected String handleContentUri(Uri uri, File file, Context context, String str) {\n            String str2 = \"\";\n            FileServices fileServices = new FileServices(context);\n            InputStream inputStream = null;\n            try {\n                inputStream = context.getContentResolver().openInputStream(uri);\n                if (file == null) {\n                    UniqueFileNameBuilder uniqueFileNameBuilder = new UniqueFileNameBuilder();\n                    uniqueFileNameBuilder.setDirectory(CoronaEnvironment.getInternalTemporaryDirectory(context));\n                    uniqueFileNameBuilder.setFileNameFormat(this.fGenericFileName);\n                    uniqueFileNameBuilder.setFileExtension(str);\n                    file = uniqueFileNameBuilder.build();\n                }\n                if (fileServices.writeToFile(inputStream, file)) {\n                    str2 = file.getAbsolutePath();\n                }\n            } catch (Exception unused) {\n            }\n            if (inputStream != null) {\n                try {\n                    inputStream.close();\n                } catch (Exception unused2) {\n                }\n            }\n            return str2;\n        }\n    }\n\n    /* JADX INFO: Access modifiers changed from: private */\n    /* loaded from: classes.dex */\n    public static class SelectVideoActivityResultHandler extends SelectMediaActivityResultHandler {\n        public SelectVideoActivityResultHandler(CoronaRuntime coronaRuntime) {\n            super(coronaRuntime, \"3gp\", \"Video\");\n        }\n\n        @Override // com.ansca.corona.CoronaActivity.SelectMediaActivityResultHandler\n        protected MediaPickerTask generateEvent(String str, int i, long j) {\n            return new VideoPickerTask(str, i, j);\n        }\n\n        @Override // com.ansca.corona.CoronaActivity.SelectMediaActivityResultHandler\n        protected String[] getColumns() {\n            return new String[]{\"_data\", \"_size\"};\n        }\n\n        @Override // com.ansca.corona.CoronaActivity.SelectMediaActivityResultHandler\n        protected String handleContentUri(Uri uri, File file, Context context, String str) {\n            return uri.toString();\n        }\n    }\n\n    /* loaded from: classes.dex */\n    private static abstract class SelectMediaRequestPermissionsResultHandler implements OnRequestPermissionsResultHandler {\n        private String fDestinationFilePath;\n        private String fLuaAPI;\n\n        protected abstract void executeSelectMedia();\n\n        protected abstract MediaPickerTask generateEmptyMediaEvent();\n\n        public SelectMediaRequestPermissionsResultHandler(String str) {\n            this.fLuaAPI = str;\n        }\n\n        protected String getDestinationFilePath() {\n            return this.fDestinationFilePath;\n        }\n\n        protected void setDestinationFilePath(String str) {\n            this.fDestinationFilePath = str;\n        }\n\n        @Override // com.ansca.corona.CoronaActivity.OnRequestPermissionsResultHandler\n        public void onHandleRequestPermissionsResult(CoronaActivity coronaActivity, int i, String[] strArr, int[] iArr) {\n            PermissionsSettings unregisterRequestPermissionsResultHandler = coronaActivity.unregisterRequestPermissionsResultHandler(this);\n            if (unregisterRequestPermissionsResultHandler != null) {\n                unregisterRequestPermissionsResultHandler.markAsServiced();\n            }\n            if (new PermissionsServices(CoronaEnvironment.getApplicationContext()).getPermissionStateFor(PermissionsServices.Permission.READ_EXTERNAL_STORAGE) == PermissionState.GRANTED) {\n                executeSelectMedia();\n            } else if (coronaActivity != null) {\n                CoronaRuntime runtime = coronaActivity.getRuntime();\n                if (runtime != null) {\n                    CoronaRuntimeTaskDispatcher taskDispatcher = runtime.getTaskDispatcher();\n                    if (taskDispatcher != null) {\n                        taskDispatcher.send(generateEmptyMediaEvent());\n                        return;\n                    }\n                    Log.v(\"Corona\", this.fLuaAPI + \" cannot continue because there's no Corona Runtime Task Dispatcher!\");\n                    return;\n                }\n                Log.v(\"Corona\", this.fLuaAPI + \" cannot continue because there's no Corona Runtime!\");\n            } else {\n                Log.v(\"Corona\", this.fLuaAPI + \" cannot continue because there's no Corona Activity!\");\n            }\n        }\n    }\n\n    /* loaded from: classes.dex */\n    private static class SelectImageRequestPermissionsResultHandler extends SelectMediaRequestPermissionsResultHandler {\n        public SelectImageRequestPermissionsResultHandler(String str, String str2) {\n            super(str);\n            setDestinationFilePath(str2);\n        }\n\n        @Override // com.ansca.corona.CoronaActivity.SelectMediaRequestPermissionsResultHandler\n        protected void executeSelectMedia() {\n            CoronaActivity coronaActivity = CoronaEnvironment.getCoronaActivity();\n            if (coronaActivity == null) {\n                return;\n            }\n            coronaActivity.showSelectImageWindowUsing(getDestinationFilePath());\n        }\n\n        @Override // com.ansca.corona.CoronaActivity.SelectMediaRequestPermissionsResultHandler\n        protected MediaPickerTask generateEmptyMediaEvent() {\n            return new ImagePickerTask();\n        }\n    }\n\n    /* JADX INFO: Access modifiers changed from: private */\n    /* loaded from: classes.dex */\n    public static class SelectVideoRequestPermissionsResultHandler extends SelectMediaRequestPermissionsResultHandler {\n        public SelectVideoRequestPermissionsResultHandler(String str) {\n            super(str);\n        }\n\n        @Override // com.ansca.corona.CoronaActivity.SelectMediaRequestPermissionsResultHandler\n        protected void executeSelectMedia() {\n            CoronaActivity coronaActivity = CoronaEnvironment.getCoronaActivity();\n            if (coronaActivity == null) {\n                return;\n            }\n            coronaActivity.showSelectVideoWindow();\n        }\n\n        @Override // com.ansca.corona.CoronaActivity.SelectMediaRequestPermissionsResultHandler\n        protected MediaPickerTask generateEmptyMediaEvent() {\n            return new VideoPickerTask();\n        }\n    }\n\n    private boolean canWriteToExternalStorage() {\n        return checkCallingOrSelfPermission(PermissionsServices.Permission.WRITE_EXTERNAL_STORAGE) == 0 && \"mounted\".equals(Environment.getExternalStorageState());\n    }\n\n    /* loaded from: classes.dex */\n    private class ImagePickerEventGenerator implements MediaEventGenerator {\n        private ImagePickerEventGenerator() {\n        }\n\n        @Override // com.ansca.corona.CoronaActivity.MediaEventGenerator\n        public MediaPickerTask generateEvent(String str) {\n            return new ImagePickerTask(str);\n        }\n\n        @Override // com.ansca.corona.CoronaActivity.MediaEventGenerator\n        public MediaPickerTask generateEvent(String str, int i, long j) {\n            return new ImagePickerTask(str);\n        }\n    }\n\n    /* loaded from: classes.dex */\n    private class VideoPickerEventGenerator implements MediaEventGenerator {\n        private VideoPickerEventGenerator() {\n        }\n\n        @Override // com.ansca.corona.CoronaActivity.MediaEventGenerator\n        public MediaPickerTask generateEvent(String str) {\n            return new VideoPickerTask(str);\n        }\n\n        @Override // com.ansca.corona.CoronaActivity.MediaEventGenerator\n        public MediaPickerTask generateEvent(String str, int i, long j) {\n            return new VideoPickerTask(str, i, j);\n        }\n    }\n\n    /* JADX INFO: Access modifiers changed from: package-private */\n    public void showCameraWindowForImage(String str) {\n        String str2;\n        MediaEventGenerator imagePickerEventGenerator = new ImagePickerEventGenerator();\n        if (str == null) {\n            File cacheDir = getApplicationContext().getCacheDir();\n            cacheDir.mkdirs();\n            UniqueFileNameBuilder uniqueFileNameBuilder = new UniqueFileNameBuilder();\n            uniqueFileNameBuilder.setDirectory(cacheDir);\n            uniqueFileNameBuilder.setFileNameFormat(\"Picture\");\n            uniqueFileNameBuilder.setFileExtension(\".jpg\");\n            File build = uniqueFileNameBuilder.build();\n            if (build == null) {\n                Log.v(\"Corona\", \"Failed to generate a unique file name for the camera shot.\");\n                CoronaRuntime coronaRuntime = this.fCoronaRuntime;\n                if (coronaRuntime == null || !coronaRuntime.isRunning()) {\n                    return;\n                }\n                this.fCoronaRuntime.getTaskDispatcher().send(imagePickerEventGenerator.generateEvent(\"\"));\n                return;\n            }\n            str2 = build.getAbsolutePath();\n        } else {\n            str2 = str;\n        }\n        Intent intent = new Intent(\"android.media.action.IMAGE_CAPTURE\");\n        Uri createContentUriForFile = com.ansca.corona.storage.FileContentProvider.createContentUriForFile(getApplicationContext(), str2);\n        intent.putExtra(\"output\", createContentUriForFile);\n        showCameraWindowUsing(str, intent, imagePickerEventGenerator, createContentUriForFile);\n    }\n\n    /* JADX INFO: Access modifiers changed from: package-private */\n    public void showCameraWindowForVideo(int i, int i2) {\n        Intent intent = new Intent(\"android.media.action.VIDEO_CAPTURE\");\n        Context applicationContext = getApplicationContext();\n        String absolutePath = new File(CoronaEnvironment.getCachesDirectory(applicationContext), \"Video.3gp\").getAbsolutePath();\n        Uri createContentUriForFile = com.ansca.corona.storage.FileContentProvider.createContentUriForFile(applicationContext, absolutePath);\n        MediaEventGenerator videoPickerEventGenerator = new VideoPickerEventGenerator();\n        intent.putExtra(\"output\", createContentUriForFile);\n        if (i > 0) {\n            intent.putExtra(\"android.intent.extra.durationLimit\", i);\n        }\n        intent.putExtra(\"android.intent.extra.videoQuality\", i2);\n        showCameraWindowUsing(absolutePath, intent, videoPickerEventGenerator, createContentUriForFile);\n    }\n\n    private void showCameraWindowUsing(String str, Intent intent, MediaEventGenerator mediaEventGenerator, Uri uri) {\n        PermissionState permissionStateFor = new PermissionsServices(CoronaEnvironment.getApplicationContext()).getPermissionStateFor(PermissionsServices.Permission.CAMERA);\n        ResourceServices resourceServices = new ResourceServices(CoronaEnvironment.getApplicationContext());\n        boolean hasCamera = CameraServices.hasCamera();\n        if (!hasCamera) {\n            Log.i(\"Corona\", \"WARNING: Camera not found.\");\n            Controller controller = this.fController;\n            if (controller != null) {\n                controller.showNativeAlert(\"Warning\", \"Camera not found.\", new String[]{resourceServices.getResources().getString(17039370)});\n            }\n        } else if (permissionStateFor == PermissionState.MISSING) {\n            Controller controller2 = this.fController;\n            if (controller2 != null) {\n                controller2.showPermissionMissingFromManifestAlert(PermissionsServices.Permission.CAMERA, CoronaEnvironment.getApplicationName() + \" is trying to use the camera, but hasn't registered for access to it.\");\n            }\n        } else if (permissionStateFor == PermissionState.DENIED) {\n            String str2 = CoronaEnvironment.getApplicationName() + \" does not have permission to use the camera.\";\n            if (Build.VERSION.SDK_INT >= 23) {\n                CameraServices.requestCameraPermission();\n            } else if (this.fController != null) {\n                Log.i(\"Corona\", \"WARNING: \" + str2);\n                this.fController.showNativeAlert(\"Warning\", str2, new String[]{resourceServices.getResources().getString(17039370)});\n            }\n        }\n        if (!hasCamera || permissionStateFor != PermissionState.GRANTED) {\n            CoronaRuntime coronaRuntime = this.fCoronaRuntime;\n            if (coronaRuntime == null || !coronaRuntime.isRunning()) {\n                return;\n            }\n            this.fCoronaRuntime.getTaskDispatcher().send(mediaEventGenerator.generateEvent(\"\"));\n            return;\n        }\n        TakeMediaWithExternalActivityResultHandler takeMediaWithExternalActivityResultHandler = new TakeMediaWithExternalActivityResultHandler(this.fCoronaRuntime, mediaEventGenerator);\n        takeMediaWithExternalActivityResultHandler.setDestinationFilePath(str);\n        int registerActivityResultHandler = registerActivityResultHandler(takeMediaWithExternalActivityResultHandler);\n        if (uri != null) {\n            takeMediaWithExternalActivityResultHandler.setSourceUri(uri);\n        }\n        if (intent.resolveActivity(getPackageManager()) != null) {\n            startActivityForResult(intent, registerActivityResultHandler);\n        } else {\n            launchCoronaCameraActivity(str);\n        }\n    }\n\n    private void launchCoronaCameraActivity(String str) {\n        Intent intent = new Intent(this, CameraActivity.class);\n        if (str != null && str.length() > 0) {\n            intent.setData(Uri.parse(str));\n        }\n        startActivityForResult(intent, registerActivityResultHandler(new TakePictureWithCoronaActivityResultHandler(this.fCoronaRuntime)));\n    }\n\n    /* JADX INFO: Access modifiers changed from: private */\n    /* loaded from: classes.dex */\n    public static class TakeMediaWithExternalActivityResultHandler implements OnActivityResultHandler {\n        private CoronaRuntime fCoronaRuntime;\n        private MediaEventGenerator fEventGenerator;\n        private Uri fSourceUri = null;\n        private File fDestinationFile = null;\n\n        public TakeMediaWithExternalActivityResultHandler(CoronaRuntime coronaRuntime, MediaEventGenerator mediaEventGenerator) {\n            this.fEventGenerator = mediaEventGenerator;\n            this.fCoronaRuntime = coronaRuntime;\n        }\n\n        public void setSourceUri(Uri uri) {\n            this.fSourceUri = uri;\n        }\n\n        public void setDestinationFilePath(String str) {\n            this.fDestinationFile = null;\n            if (str == null || str.length() <= 0) {\n                return;\n            }\n            this.fDestinationFile = new File(str);\n        }\n\n        @Override // com.ansca.corona.CoronaActivity.OnActivityResultHandler\n        public void onHandleActivityResult(CoronaActivity coronaActivity, int i, int i2, Intent intent) {\n            coronaActivity.unregisterActivityResultHandler(this);\n            Uri uri = null;\n            String scheme = (intent == null || intent.getData() == null || intent.getData().getScheme() == null) ? null : intent.getData().getScheme();\n            String str = \"\";\n            long j = -1;\n            try {\n                uri = com.ansca.corona.storage.FileContentProvider.createContentUriForFile(coronaActivity.getApplicationContext(), this.fDestinationFile);\n            } catch (Throwable unused) {\n            }\n            if (i2 == -1 && uri != null && uri.equals(this.fSourceUri)) {\n                str = this.fDestinationFile.getAbsolutePath();\n            } else if (i2 == -1 && (this.fSourceUri != null || \"file\".equals(scheme))) {\n                File file = new File(this.fSourceUri.getPath());\n                Uri uri2 = this.fSourceUri;\n                final File file2 = (uri2 == null || !uri2.getScheme().equals(\"content\")) ? file : new File(new File(CoronaEnvironment.getApplicationContext().getApplicationInfo().dataDir), this.fSourceUri.getPath());\n                if (file2.exists()) {\n                    final long length = file2.length();\n                    final File file3 = this.fDestinationFile;\n                    if (file3 != null) {\n                        new Thread(new Runnable() { // from class: com.ansca.corona.CoronaActivity.TakeMediaWithExternalActivityResultHandler.1\n                            @Override // java.lang.Runnable\n                            public void run() {\n                                boolean moveFile = new FileServices(CoronaEnvironment.getApplicationContext()).moveFile(file2, file3);\n                                int durationOfVideo = CoronaActivity.getDurationOfVideo(file3.getAbsolutePath());\n                                if (TakeMediaWithExternalActivityResultHandler.this.fCoronaRuntime == null || TakeMediaWithExternalActivityResultHandler.this.fEventGenerator == null) {\n                                    return;\n                                }\n                                if (!moveFile) {\n                                    TakeMediaWithExternalActivityResultHandler.this.fCoronaRuntime.getTaskDispatcher().send(TakeMediaWithExternalActivityResultHandler.this.fEventGenerator.generateEvent(\"\"));\n                                } else {\n                                    TakeMediaWithExternalActivityResultHandler.this.fCoronaRuntime.getTaskDispatcher().send(TakeMediaWithExternalActivityResultHandler.this.fEventGenerator.generateEvent(file3.getAbsolutePath(), durationOfVideo, length));\n                                }\n                            }\n                        }).start();\n                        return;\n                    } else {\n                        str = file2.getAbsolutePath();\n                        j = length;\n                    }\n                }\n            } else if (i2 == -1 && \"content\".equals(scheme) && intent != null && intent.getData() != null) {\n                String[] strArr = {\"_data\", \"_size\"};\n                Cursor query = CoronaEnvironment.getApplicationContext().getContentResolver().query(intent.getData(), strArr, null, null, null);\n                query.moveToFirst();\n                str = query.getString(query.getColumnIndex(strArr[0]));\n                j = query.getLong(query.getColumnIndex(strArr[1]));\n                query.close();\n            }\n            if (this.fCoronaRuntime == null || this.fEventGenerator == null) {\n                return;\n            }\n            this.fCoronaRuntime.getTaskDispatcher().send(this.fEventGenerator.generateEvent(str, CoronaActivity.getDurationOfVideo(str), j));\n        }\n    }\n\n    /* JADX INFO: Access modifiers changed from: private */\n    /* loaded from: classes.dex */\n    public static class TakePictureWithCoronaActivityResultHandler implements OnActivityResultHandler {\n        private CoronaRuntime fCoronaRuntime;\n\n        public TakePictureWithCoronaActivityResultHandler(CoronaRuntime coronaRuntime) {\n            this.fCoronaRuntime = coronaRuntime;\n        }\n\n        @Override // com.ansca.corona.CoronaActivity.OnActivityResultHandler\n        public void onHandleActivityResult(CoronaActivity coronaActivity, int i, int i2, Intent intent) {\n            Uri data;\n            coronaActivity.unregisterActivityResultHandler(this);\n            String path = (i2 != -1 || intent == null || (data = intent.getData()) == null) ? \"\" : data.getPath();\n            CoronaRuntime coronaRuntime = this.fCoronaRuntime;\n            if (coronaRuntime != null) {\n                coronaRuntime.getTaskDispatcher().send(new ImagePickerTask(path));\n            }\n        }\n    }\n\n    /* JADX INFO: Access modifiers changed from: package-private */\n    public void showSendMailWindowUsing(MailSettings mailSettings) {\n        if (mailSettings == null) {\n            mailSettings = new MailSettings();\n        }\n        startActivityForResult(mailSettings.toIntent(), registerActivityResultHandler(new PopupActivityResultHandler(\"mail\")));\n    }\n\n    /* JADX INFO: Access modifiers changed from: package-private */\n    public void showSendSmsWindowUsing(SmsSettings smsSettings) {\n        if (smsSettings == null) {\n            smsSettings = new SmsSettings();\n        }\n        startActivityForResult(smsSettings.toIntent(), registerActivityResultHandler(new PopupActivityResultHandler(\"sms\")));\n    }\n\n    /* JADX INFO: Access modifiers changed from: package-private */\n    public void showRequestPermissionsWindowUsing(PermissionsSettings permissionsSettings) {\n        String[] strArr;\n        if (permissionsSettings == null || Build.VERSION.SDK_INT < 23) {\n            Log.v(\"Corona\", \"Cannot request permissions. Invalid environment!\");\n            return;\n        }\n        LinkedHashSet<String> permissions = permissionsSettings.getPermissions();\n        if (permissions == null || permissions.isEmpty()) {\n            Log.v(\"Corona\", \"No App Permissions requested!\");\n            return;\n        }\n        PermissionsServices permissionsServices = new PermissionsServices(CoronaEnvironment.getApplicationContext());\n        LinkedHashSet<String> linkedHashSet = new LinkedHashSet<>();\n        Iterator<String> it = permissions.iterator();\n        while (it.hasNext()) {\n            String next = it.next();\n            if (permissionsServices.isPAAppPermissionName(next)) {\n                String permissionGroupFromPAAppPermissionName = permissionsServices.getPermissionGroupFromPAAppPermissionName(next);\n                strArr = permissionsServices.findAllPermissionsInManifestForGroup(permissionGroupFromPAAppPermissionName);\n                if (strArr == null || strArr.length <= 0) {\n                    showPermissionGroupMissingFromManifestAlert(permissionGroupFromPAAppPermissionName);\n                    return;\n                }\n            } else if (permissionsServices.isSupportedPermissionGroupName(next)) {\n                strArr = permissionsServices.findAllPermissionsInManifestForGroup(next);\n                if (strArr == null || strArr.length <= 0) {\n                    showPermissionGroupMissingFromManifestAlert(next);\n                    return;\n                }\n            } else {\n                strArr = new String[]{next};\n            }\n            for (String str : strArr) {\n                linkedHashSet.add(str);\n            }\n        }\n        permissionsSettings.setPermissions(linkedHashSet);\n        permissionsServices.requestPermissions(permissionsSettings, new DefaultRequestPermissionsResultHandler());\n    }\n\n    /* loaded from: classes.dex */\n    private class PopupActivityResultHandler implements OnActivityResultHandler {\n        private String fPopupName;\n\n        private PopupActivityResultHandler(String str) {\n            this.fPopupName = str;\n        }\n\n        @Override // com.ansca.corona.CoronaActivity.OnActivityResultHandler\n        public void onHandleActivityResult(CoronaActivity coronaActivity, int i, int i2, Intent intent) {\n            EventManager eventManager;\n            coronaActivity.unregisterActivityResultHandler(this);\n            if (CoronaActivity.this.fCoronaRuntime == null || (eventManager = CoronaActivity.this.fCoronaRuntime.getController().getEventManager()) == null) {\n                return;\n            }\n            final String str = this.fPopupName;\n            eventManager.addEvent(new RunnableEvent(new Runnable() { // from class: com.ansca.corona.CoronaActivity.PopupActivityResultHandler.1\n                @Override // java.lang.Runnable\n                public void run() {\n                    if (CoronaActivity.this.fCoronaRuntime.getController() != null) {\n                        JavaToNativeShim.popupClosedEvent(CoronaActivity.this.fCoronaRuntime, str, false);\n                    }\n                }\n            }));\n        }\n    }\n\n    @Override // android.app.Activity\n    protected void onActivityResult(int i, int i2, Intent intent) {\n        super.onActivityResult(i, i2, intent);\n        OnActivityResultHandler onActivityResultHandler = (OnActivityResultHandler) this.fActivityResultHandlers.get(Integer.valueOf(i));\n        if (onActivityResultHandler == null) {\n            return;\n        }\n        onActivityResultHandler.onHandleActivityResult(this, i, i2, intent);\n    }\n\n    @Override // android.app.Activity\n    public void onRequestPermissionsResult(int i, String[] strArr, int[] iArr) {\n        super.onRequestPermissionsResult(i, strArr, iArr);\n        OnRequestPermissionsResultHandler onRequestPermissionsResultHandler = (OnRequestPermissionsResultHandler) this.fRequestPermissionsResultHandlers.get(Integer.valueOf(i));\n        if (onRequestPermissionsResultHandler == null) {\n            return;\n        }\n        onRequestPermissionsResultHandler.onHandleRequestPermissionsResult(this, i, strArr, iArr);\n    }\n\n    @Override // android.app.Activity, android.view.KeyEvent.Callback\n    public boolean onKeyDown(int i, KeyEvent keyEvent) {\n        ViewManager viewManager;\n        if (this.myInputHandler.handle(keyEvent)) {\n            return true;\n        }\n        if (i == 24 || i == 25) {\n            try {\n                ((AudioManager) getSystemService(\"audio\")).adjustSuggestedStreamVolume(i == 24 ? 1 : -1, getVolumeControlStream(), 21);\n                return true;\n            } catch (Exception unused) {\n            }\n        }\n        if (i == 4 && (viewManager = this.fCoronaRuntime.getViewManager()) != null && viewManager.goBack()) {\n            return true;\n        }\n        return super.onKeyDown(i, keyEvent);\n    }\n\n    @Override // android.app.Activity, android.view.KeyEvent.Callback\n    public boolean onKeyUp(int i, KeyEvent keyEvent) {\n        if (this.myInputHandler.handle(keyEvent)) {\n            return true;\n        }\n        return super.onKeyUp(i, keyEvent);\n    }\n\n    /* loaded from: classes.dex */\n    private static class EventHandler implements ViewTreeObserver.OnGlobalLayoutListener {\n        private CoronaActivity fActivity;\n        private boolean fIsUpdatingLayout;\n        private Ticks fUpdateLayoutEndTicks;\n\n        public EventHandler(CoronaActivity coronaActivity) {\n            View contentView;\n            if (coronaActivity == null) {\n                throw new NullPointerException();\n            }\n            this.fActivity = coronaActivity;\n            this.fIsUpdatingLayout = false;\n            this.fUpdateLayoutEndTicks = Ticks.fromCurrentTime();\n            if ((this.fActivity.getWindow().getAttributes().flags & 512) != 0 || (contentView = getContentView()) == null) {\n                return;\n            }\n            contentView.getViewTreeObserver().addOnGlobalLayoutListener(this);\n        }\n\n        public void dispose() {\n            View contentView = getContentView();\n            if (contentView != null) {\n                if (Build.VERSION.SDK_INT >= 16) {\n                    ApiLevel16.removeOnGlobalLayoutListener(contentView.getViewTreeObserver(), this);\n                } else {\n                    contentView.getViewTreeObserver().removeGlobalOnLayoutListener(this);\n                }\n            }\n        }\n\n        @Override // android.view.ViewTreeObserver.OnGlobalLayoutListener\n        public void onGlobalLayout() {\n            View contentView;\n            boolean isAcceptingText = ((InputMethodManager) this.fActivity.getSystemService(\"input_method\")).isAcceptingText();\n            Ticks fromCurrentTime = Ticks.fromCurrentTime();\n            if (isAcceptingText) {\n                this.fIsUpdatingLayout = true;\n                this.fUpdateLayoutEndTicks = fromCurrentTime.addSeconds(2L);\n            }\n            if (this.fIsUpdatingLayout && this.fUpdateLayoutEndTicks.compareTo(fromCurrentTime) < 0) {\n                this.fIsUpdatingLayout = false;\n            }\n            if (this.fIsUpdatingLayout && (contentView = getContentView()) != null) {\n                contentView.requestLayout();\n            }\n        }\n\n        private View getContentView() {\n            ViewManager viewManager;\n            ViewGroup contentView;\n            CoronaRuntime coronaRuntime = this.fActivity.fCoronaRuntime;\n            if (coronaRuntime == null || (viewManager = coronaRuntime.getViewManager()) == null || (contentView = viewManager.getContentView()) == null) {\n                return null;\n            }\n            return contentView;\n        }\n    }\n\n    /* JADX INFO: Access modifiers changed from: package-private */\n    /* loaded from: classes.dex */\n    public static class DefaultRequestPermissionsResultHandler implements OnRequestPermissionsResultHandler {\n        DefaultRequestPermissionsResultHandler() {\n        }\n\n        /* JADX INFO: Access modifiers changed from: private */\n        public static int createLuaTableFromStringArray(LuaState luaState, String[] strArr) {\n            int i = 0;\n            luaState.newTable(strArr.length, 0);\n            while (i < strArr.length) {\n                luaState.pushString(strArr[i]);\n                i++;\n                luaState.rawSet(-2, i);\n            }\n            return 1;\n        }\n\n        public void forwardRequestPermissionsResultToLua(final RequestPermissionsResultData requestPermissionsResultData) {\n            CoronaRuntimeTask coronaRuntimeTask = new CoronaRuntimeTask() { // from class: com.ansca.corona.CoronaActivity.DefaultRequestPermissionsResultHandler.1\n                @Override // com.ansca.corona.CoronaRuntimeTask\n                public void executeUsing(CoronaRuntime coronaRuntime) {\n                    try {\n                        LuaState luaState = coronaRuntime.getLuaState();\n                        int listener = requestPermissionsResultData.getPermissionsSettings().getListener();\n                        if (-1 != listener && listener != 0) {\n                            CoronaLua.newEvent(luaState, \"popup\");\n                            luaState.pushString(\"appPermissionRequest\");\n                            luaState.setField(-2, \"type\");\n                            ArrayList<String> grantedPermissions = requestPermissionsResultData.getGrantedPermissions();\n                            if (grantedPermissions != null) {\n                                Object[] array = grantedPermissions.toArray();\n                                if (DefaultRequestPermissionsResultHandler.createLuaTableFromStringArray(luaState, (String[]) Arrays.copyOf(array, array.length, String[].class)) > 0) {\n                                    luaState.setField(-2, \"grantedAppPermissions\");\n                                }\n                            } else {\n                                luaState.newTable(0, 0);\n                                luaState.setField(-2, \"grantedAppPermissions\");\n                            }\n                            ArrayList<String> deniedPermissions = requestPermissionsResultData.getDeniedPermissions();\n                            if (deniedPermissions != null) {\n                                Object[] array2 = deniedPermissions.toArray();\n                                if (DefaultRequestPermissionsResultHandler.createLuaTableFromStringArray(luaState, (String[]) Arrays.copyOf(array2, array2.length, String[].class)) > 0) {\n                                    luaState.setField(-2, \"deniedAppPermissions\");\n                                }\n                            } else {\n                                luaState.newTable(0, 0);\n                                luaState.setField(-2, \"deniedAppPermissions\");\n                            }\n                            luaState.pushBoolean(requestPermissionsResultData.getUserHitNeverAskAgain());\n                            luaState.setField(-2, \"neverAskAgain\");\n                            CoronaLua.dispatchEvent(luaState, listener, 0);\n                            return;\n                        }\n                        Log.i(\"Corona\", \"ERROR: CoronaActivity.DefaultRequestPermissiosnResultHandler.forwardRequestPermissionsResultToLua():Cannot forward results to Lua as no registry ID was found!\");\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                }\n            };\n            Log.d(\"Corona\", \"Execute the lua listener task\");\n            requestPermissionsResultData.getCoronaActivity().getRuntimeTaskDispatcher().send(coronaRuntimeTask);\n            requestPermissionsResultData.getCoronaActivity().getRuntime().getController().getEventManager().sendEvents();\n            requestPermissionsResultData.getPermissionsSettings().markAsServiced();\n        }\n\n        @Override // com.ansca.corona.CoronaActivity.OnRequestPermissionsResultHandler\n        public void onHandleRequestPermissionsResult(CoronaActivity coronaActivity, int i, String[] strArr, int[] iArr) {\n            boolean z;\n            PermissionsServices permissionsServices = new PermissionsServices(coronaActivity);\n            ArrayList arrayList = new ArrayList();\n            ArrayList arrayList2 = new ArrayList();\n            ArrayList arrayList3 = new ArrayList();\n            ArrayList arrayList4 = new ArrayList();\n            boolean z2 = false;\n            for (int i2 = 0; i2 < strArr.length; i2++) {\n                String str = strArr[i2];\n                if (permissionsServices.isPartOfPAAppPermission(str)) {\n                    str = permissionsServices.getPAAppPermissionNameFromAndroidPermission(str);\n                }\n                if (iArr[i2] == 0) {\n                    arrayList.add(strArr[i2]);\n                    if (!arrayList2.contains(str) && !arrayList4.contains(str)) {\n                        arrayList2.add(str);\n                    }\n                } else {\n                    arrayList3.add(strArr[i2]);\n                    if (!arrayList2.contains(str) && !arrayList4.contains(str)) {\n                        arrayList4.add(str);\n                    }\n                }\n            }\n            PermissionsSettings unregisterRequestPermissionsResultHandler = coronaActivity.unregisterRequestPermissionsResultHandler(this);\n            if (unregisterRequestPermissionsResultHandler != null) {\n                if (arrayList3.isEmpty()) {\n                    z = false;\n                } else {\n                    PermissionUrgency urgency = unregisterRequestPermissionsResultHandler.getUrgency();\n                    Iterator it = arrayList3.iterator();\n                    while (it.hasNext()) {\n                        String str2 = (String) it.next();\n                        boolean shouldShowRequestPermissionRationale = coronaActivity.shouldShowRequestPermissionRationale(str2);\n                        if (urgency != PermissionUrgency.LOW && shouldShowRequestPermissionRationale && unregisterRequestPermissionsResultHandler.needsService()) {\n                            coronaActivity.getRuntime().getController().showPermissionRationaleAlert(str2, new RequestPermissionsResultData(unregisterRequestPermissionsResultHandler, arrayList2, arrayList4, false, i, coronaActivity, this));\n                            unregisterRequestPermissionsResultHandler.markAsServiced();\n                            return;\n                        } else if (!shouldShowRequestPermissionRationale) {\n                            if (urgency == PermissionUrgency.CRITICAL) {\n                                coronaActivity.getRuntime().getController().showSettingsRedirectForPermissionAlert(str2, new RequestPermissionsResultData(unregisterRequestPermissionsResultHandler, arrayList2, arrayList4, true, i, coronaActivity, this));\n                                unregisterRequestPermissionsResultHandler.markAsServiced();\n                                return;\n                            }\n                            z2 = true;\n                        }\n                    }\n                    z = z2;\n                }\n                forwardRequestPermissionsResultToLua(new RequestPermissionsResultData(unregisterRequestPermissionsResultHandler, arrayList2, arrayList4, z, i, coronaActivity, this));\n            }\n        }\n    }\n\n    /* JADX INFO: Access modifiers changed from: private */\n    /* loaded from: classes.dex */\n    public static class ApiLevel16 {\n        private ApiLevel16() {\n        }\n\n        public static void removeOnGlobalLayoutListener(ViewTreeObserver viewTreeObserver, ViewTreeObserver.OnGlobalLayoutListener onGlobalLayoutListener) {\n            if (viewTreeObserver != null && onGlobalLayoutListener != null) {\n                try {\n                    if (Build.VERSION.SDK_INT < 16) {\n                        return;\n                    }\n                    viewTreeObserver.removeOnGlobalLayoutListener(onGlobalLayoutListener);\n                } catch (Exception unused) {\n                }\n            }\n        }\n    }\n}\n",
    "functions": [
        "public boolean hasFixedOrientation() {\n        return false;\n    }",
        "public void showSplashScreen() {\n    }",
        "public boolean supportsOrientationChanges() {\n        return false;\n    }",
        "public CoronaRuntime getRuntime() {\n        return this.fCoronaRuntime;\n    }",
        "protected void onCreate(android.os.Bundle r4) {\n        /*\n            Method dump skipped, instructions count: 411\n            To view this dump add '--comments-level debug' option\n        */\n        throw new UnsupportedOperationException(\"Method not decompiled: com.ansca.corona.CoronaActivity.onCreate(android.os.Bundle):void\");\n    }",
        "public void showPermissionMissingFromManifestAlert(String str, String str2) {\n        Controller controller = this.fController;\n        if (controller == null) {\n            return;\n        }\n        controller.showPermissionMissingFromManifestAlert(str, str2);\n    }",
        "public void showPermissionGroupMissingFromManifestAlert(String str) {\n        Controller controller = this.fController;\n        if (controller == null) {\n            return;\n        }\n        controller.showPermissionGroupMissingFromManifestAlert(str);\n    }",
        "private void initializeOrientation() {\n        this.myInitialOrientationSetting = getRequestedOrientation();\n        try {\n            ActivityInfo activityInfo = getPackageManager().getActivityInfo(getComponentName(), 128);\n            if (activityInfo != null && activityInfo.metaData != null) {\n                String string = activityInfo.metaData.getString(\"requestedDefaultOrientation\");\n                if (string.equals(\"portrait\")) {\n                    this.myInitialOrientationSetting = 1;\n                } else if (string.equals(\"landscape\")) {\n                    this.myInitialOrientationSetting = 0;\n                } else if (string.equals(\"reversePortrait\")) {\n                    this.myInitialOrientationSetting = 9;\n                } else if (string.equals(\"reverseLandscape\")) {\n                    this.myInitialOrientationSetting = 8;\n                } else if (string.equals(\"sensorPortrait\")) {\n                    this.myInitialOrientationSetting = 7;\n                } else if (string.equals(\"sensorLandscape\")) {\n                    this.myInitialOrientationSetting = 6;\n                } else if (string != null) {\n                    this.myInitialOrientationSetting = -1;\n                }\n            }",
        "public void onChange(boolean z) {\n                    super.onChange(z);\n                    if (Settings.System.getInt(CoronaActivity.this.getContentResolver(), \"accelerometer_rotation\", 0) == 0) {\n                        if (CoronaActivity.this.myIsActivityResumed) {\n                            if (CoronaActivity.this.fController.getSystemMonitor() != null && CoronaActivity.this.fController.getSystemMonitor().isScreenUnlocked()) {\n                                CoronaActivity.this.lockCurrentOrientation();\n                                return;\n                            } else if ((CoronaActivity.this.isAtPortraitOrientation() && !CoronaActivity.this.supportsPortraitOrientation()) || (CoronaActivity.this.isAtLandscapeOrientation() && !CoronaActivity.this.supportsLandscapeOrientation())) {\n                                CoronaActivity coronaActivity = CoronaActivity.this;\n                                coronaActivity.lockOrientation(coronaActivity.getLoggedOrientation());\n                                return;\n                            } else {\n                                CoronaActivity.this.lockCurrentOrientation();\n                                return;\n                            }\n                        }",
        "public boolean supportsPortraitOrientation() {\n        int i = this.myInitialOrientationSetting;\n        return i == -1 || i == 1 || i == 4 || i == 7 || i == 9 || i == 10 || i == 12 || i == 13;\n    }",
        "public boolean supportsLandscapeOrientation() {\n        int i = this.myInitialOrientationSetting;\n        return i == -1 || i == 0 || i == 4 || i == 6 || i == 8 || i == 13 || i == 10 || i == 11;\n    }",
        "public int getOrientationFromManifest() {\n        return this.myInitialOrientationSetting;\n    }",
        "public void setRequestedOrientation(int i) {\n        super.setRequestedOrientation(screenOrientationFilter(i));\n    }",
        "public FrameLayout getOverlayView() {\n        ViewManager viewManager = this.fCoronaRuntime.getViewManager();\n        if (viewManager == null) {\n            return null;\n        }\n        return viewManager.getOverlayView();\n    }",
        "public Intent getInitialIntent() {\n        return this.myInitialIntent;\n    }",
        "public Intent getIntent() {\n        return super.getIntent();\n    }",
        "public int getHorizontalMarginInPixels() {\n        return JavaToNativeShim.getHorizontalMarginInPixels(this.fCoronaRuntime);\n    }",
        "public int getVerticalMarginInPixels() {\n        return JavaToNativeShim.getVerticalMarginInPixels(this.fCoronaRuntime);\n    }",
        "public int getContentWidthInPixels() {\n        return JavaToNativeShim.getContentWidthInPixels(this.fCoronaRuntime);\n    }",
        "public int getContentHeightInPixels() {\n        return JavaToNativeShim.getContentHeightInPixels(this.fCoronaRuntime);\n    }",
        "public Point convertCoronaPointToAndroidPoint(int i, int i2) {\n        return JavaToNativeShim.convertCoronaPointToAndroidPoint(this.fCoronaRuntime, i, i2);\n    }",
        "public Handler getHandler() {\n        return this.myHandler;\n    }",
        "public CoronaRuntimeTaskDispatcher getRuntimeTaskDispatcher() {\n        return this.myRuntimeTaskDispatcher;\n    }",
        "public void setStatusBarMode(com.ansca.corona.CoronaStatusBarSettings r6) {\n        /*\n            r5 = this;\n            com.ansca.corona.CoronaStatusBarSettings r0 = r5.myStatusBarMode\n            if (r6 != r0) goto L5\n            return\n        L5:\n            int r0 = android.os.Build.VERSION.SDK_INT\n            r1 = 28\n            if (r0 < r1) goto L1b\n            android.view.Window r0 = r5.getWindow()\n            android.view.View r0 = r0.getDecorView()\n            com.ansca.corona.CoronaActivity$2 r2 = new com.ansca.corona.CoronaActivity$2\n            r2.<init>()\n            r0.setOnApplyWindowInsetsListener(r2)\n        L1b:\n            com.ansca.corona.CoronaStatusBarSettings r0 = com.ansca.corona.CoronaStatusBarSettings.HIDDEN\n            r2 = 1\n            r3 = 2048(0x800, float:2.87E-42)\n            r4 = 1024(0x400, float:1.435E-42)\n            if (r6 != r0) goto L42\n            android.view.Window r0 = r5.getWindow()\n            r0.addFlags(r4)\n            android.view.Window r0 = r5.getWindow()\n            r0.clearFlags(r3)\n            int r0 = android.os.Build.VERSION.SDK_INT\n            if (r0 < r1) goto Ld4\n            android.view.Window r0 = r5.getWindow()\n            android.view.WindowManager$LayoutParams r0 = r0.getAttributes()\n            r0.layoutInDisplayCutoutMode = r2\n            goto Ld4\n        L42:\n            com.ansca.corona.CoronaStatusBarSettings r0 = com.ansca.corona.CoronaStatusBarSettings.DEFAULT\n            if (r6 == r0) goto L58\n            com.ansca.corona.CoronaStatusBarSettings r0 = com.ansca.corona.CoronaStatusBarSettings.TRANSLUCENT\n            if (r6 == r0) goto L58\n            com.ansca.corona.CoronaStatusBarSettings r0 = com.ansca.corona.CoronaStatusBarSettings.DARK\n            if (r6 == r0) goto L58\n            com.ansca.corona.CoronaStatusBarSettings r0 = com.ansca.corona.CoronaStatusBarSettings.LIGHT_TRANSPARENT\n            if (r6 == r0) goto L58\n            com.ansca.corona.CoronaStatusBarSettings r0 = com.ansca.corona.CoronaStatusBarSettings.DARK_TRANSPARENT\n            if (r6 != r0) goto L57\n            goto L58\n        L57:\n            return\n        L58:\n            com.ansca.corona.CoronaStatusBarSettings r0 = r5.myStatusBarMode\n            com.ansca.corona.CoronaStatusBarSettings r1 = com.ansca.corona.CoronaStatusBarSettings.HIDDEN\n            if (r0 != r1) goto L6c\n            android.view.Window r0 = r5.getWindow()\n            r0.addFlags(r3)\n            android.view.Window r0 = r5.getWindow()\n            r0.clearFlags(r4)\n        L6c:\n            int r0 = android.os.Build.VERSION.SDK_INT\n            r1 = 23\n            if (r0 < r1) goto L89\n            com.ansca.corona.graphics.opengl.CoronaGLSurfaceView r0 = r5.myGLView\n            if (r0 == 0) goto L89\n            int r0 = r0.getSystemUiVisibility()\n            com.ansca.corona.CoronaStatusBarSettings r1 = com.ansca.corona.CoronaStatusBarSettings.DARK_TRANSPARENT\n            if (r6 != r1) goto L81\n            r0 = r0 | 8192(0x2000, float:1.148E-41)\n            goto L83\n        L81:\n            r0 = r0 & (-8193(0xffffffffffffdfff, float:NaN))\n        L83:\n            com.ansca.corona.graphics.opengl.CoronaGLSurfaceView r1 = r5.myGLView\n            r1.setSystemUiVisibility(r0)\n            goto L90\n        L89:\n            com.ansca.corona.CoronaStatusBarSettings r0 = com.ansca.corona.CoronaStatusBarSettings.DARK_TRANSPARENT\n            if (r6 != r0) goto L90\n            com.ansca.corona.CoronaStatusBarSettings r0 = com.ansca.corona.CoronaStatusBarSettings.LIGHT_TRANSPARENT\n            goto L91\n        L90:\n            r0 = r6\n        L91:\n            com.ansca.corona.CoronaStatusBarSettings r1 = com.ansca.corona.CoronaStatusBarSettings.LIGHT_TRANSPARENT\n            if (r0 == r1) goto L9b\n            com.ansca.corona.CoronaStatusBarSettings r1 = com.ansca.corona.CoronaStatusBarSettings.DARK_TRANSPARENT\n            if (r0 != r1) goto L9a\n            goto L9b\n        L9a:\n            r2 = 0\n        L9b:\n            int r1 = android.os.Build.VERSION.SDK_INT\n            r3 = 21\n            if (r1 < r3) goto Lb5\n            r1 = -2147483648(0xffffffff80000000, float:-0.0)\n            if (r2 == 0) goto Lad\n            android.view.Window r2 = r5.getWindow()\n            r2.addFlags(r1)\n            goto Lb9\n        Lad:\n            android.view.Window r2 = r5.getWindow()\n            r2.clearFlags(r1)\n            goto Lb9\n        Lb5:\n            if (r2 == 0) goto Lb9\n            com.ansca.corona.CoronaStatusBarSettings r0 = com.ansca.corona.CoronaStatusBarSettings.TRANSLUCENT\n        Lb9:\n            int r1 = android.os.Build.VERSION.SDK_INT\n            r2 = 19\n            if (r1 < r2) goto Ld4\n            com.ansca.corona.CoronaStatusBarSettings r1 = com.ansca.corona.CoronaStatusBarSettings.TRANSLUCENT\n            r2 = 67108864(0x4000000, float:1.5046328E-36)\n            if (r0 != r1) goto Lcd\n            android.view.Window r0 = r5.getWindow()\n            r0.addFlags(r2)\n            goto Ld4\n        Lcd:\n            android.view.Window r0 = r5.getWindow()\n            r0.clearFlags(r2)\n        Ld4:\n            r5.myStatusBarMode = r6\n            return\n        */\n        throw new UnsupportedOperationException(\"Method not decompiled: com.ansca.corona.CoronaActivity.setStatusBarMode(com.ansca.corona.CoronaStatusBarSettings):void\");\n    }",
        "public CoronaStatusBarSettings getStatusBarMode() {\n        return this.myStatusBarMode;\n    }",
        "public DisplayCutout getDisplayCutout() {\n        return this.fDisplayCutout;\n    }",
        "public int getStatusBarHeight() {\n        String lowerCase = Build.MANUFACTURER.toLowerCase();\n        UiModeManager uiModeManager = (UiModeManager) getSystemService(\"uimode\");\n        uiModeManager.getCurrentModeType();\n        if (uiModeManager.getCurrentModeType() == 4) {\n            return 0;\n        }\n        if (lowerCase.contains(StoreName.AMAZON)) {\n            return getStatusBarHeightForAmazonDevices();\n        }\n        if (Build.MODEL.toLowerCase().contains(\"gamestick\")) {\n            return 0;\n        }\n        if (lowerCase.contains(\"barnes\") && lowerCase.contains(\"noble\")) {\n            return 0;\n        }\n        if (Build.VERSION.SDK_INT < 11 || Build.VERSION.SDK_INT > 13) {\n            return resolveStatusBarHeight();\n        }\n        return 0;\n    }",
        "public boolean IsAndroidTV() {\n        return ((UiModeManager) getSystemService(\"uimode\")).getCurrentModeType() == 4;\n    }",
        "public boolean HasSoftwareKeys() {\n        if (Build.VERSION.SDK_INT >= 17) {\n            Display defaultDisplay = getWindowManager().getDefaultDisplay();\n            DisplayMetrics displayMetrics = new DisplayMetrics();\n            defaultDisplay.getRealMetrics(displayMetrics);\n            int i = displayMetrics.heightPixels;\n            int i2 = displayMetrics.widthPixels;\n            DisplayMetrics displayMetrics2 = new DisplayMetrics();\n            defaultDisplay.getMetrics(displayMetrics2);\n            int i3 = displayMetrics2.heightPixels;\n            if (i2 - displayMetrics2.widthPixels > 0 || i - i3 > 0) {\n                return true;\n            }\n        }",
        "public int resolveNavBarHeight() {\n        int identifier = getResources().getIdentifier(\"navigation_bar_height\", \"dimen\", Constants.PLATFORM);\n        if (identifier > 0) {\n            return getResources().getDimensionPixelSize(identifier);\n        }\n        return 0;\n    }",
        "public StoreProxy getStore() {\n        return this.myStore;\n    }",
        "private int registerResultHandler(ResultHandler resultHandler, HashMap<Integer, ResultHandler> hashMap) {\n        if (resultHandler == null || hashMap == null) {\n            return -1;\n        }\n        while (true) {\n            int i = 1;\n            while (hashMap.containsKey(Integer.valueOf(i))) {\n                i++;\n                if (i < 1) {\n                    break;\n                }\n            }",
        "private int registerResultHandler(ResultHandler resultHandler, int i, HashMap<Integer, ResultHandler> hashMap) {\n        if (resultHandler != null) {\n            if (i < 1 || hashMap == null) {\n                return -1;\n            }\n            int intValue = hashMap.isEmpty() ? 1 : 1 + ((Integer) new TreeSet(hashMap.keySet()).last()).intValue();\n            for (int i2 = intValue; i2 < intValue + i; i2++) {\n                hashMap.put(Integer.valueOf(i2), resultHandler);\n            }\n            return intValue;\n        }",
        "public int registerActivityResultHandler(OnActivityResultHandler onActivityResultHandler) {\n        return registerResultHandler(onActivityResultHandler, this.fActivityResultHandlers);\n    }",
        "public int registerActivityResultHandler(OnActivityResultHandler onActivityResultHandler, int i) {\n        return registerResultHandler(onActivityResultHandler, i, this.fActivityResultHandlers);\n    }",
        "public void unregisterActivityResultHandler(OnActivityResultHandler onActivityResultHandler) {\n        unregisterResultHandler(onActivityResultHandler, this.fActivityResultHandlers);\n    }",
        "public void registerNewIntentResultHandler(OnNewIntentResultHandler onNewIntentResultHandler) {\n        this.fNewIntentResultHandlers.add(onNewIntentResultHandler);\n    }",
        "public void unregisterNewIntentResultHandler(OnActivityResultHandler onActivityResultHandler) {\n        this.fNewIntentResultHandlers.remove(onActivityResultHandler);\n    }",
        "public int registerRequestPermissionsResultHandler(OnRequestPermissionsResultHandler onRequestPermissionsResultHandler) {\n        if (Build.VERSION.SDK_INT >= 23) {\n            return registerResultHandler(onRequestPermissionsResultHandler, this.fRequestPermissionsResultHandlers);\n        }\n        return 0;\n    }",
        "public int registerRequestPermissionsResultHandler(OnRequestPermissionsResultHandler onRequestPermissionsResultHandler, PermissionsSettings permissionsSettings) {\n        int registerRequestPermissionsResultHandler = registerRequestPermissionsResultHandler(onRequestPermissionsResultHandler);\n        if (registerRequestPermissionsResultHandler > 0) {\n            PermissionsSettings.getSettingsToBeServiced().put(Integer.valueOf(registerRequestPermissionsResultHandler), permissionsSettings);\n        }\n        return registerRequestPermissionsResultHandler;\n    }",
        "public int registerRequestPermissionsResultHandler(OnRequestPermissionsResultHandler onRequestPermissionsResultHandler, int i) {\n        if (Build.VERSION.SDK_INT >= 23) {\n            return registerResultHandler(onRequestPermissionsResultHandler, i, this.fRequestPermissionsResultHandlers);\n        }\n        return 0;\n    }",
        "public int registerRequestPermissionsResultHandler(OnRequestPermissionsResultHandler onRequestPermissionsResultHandler, int i, PermissionsSettings permissionsSettings) {\n        int registerRequestPermissionsResultHandler = registerRequestPermissionsResultHandler(onRequestPermissionsResultHandler);\n        if (registerRequestPermissionsResultHandler > 0) {\n            for (int i2 = registerRequestPermissionsResultHandler; i2 < registerRequestPermissionsResultHandler + i; i2++) {\n                PermissionsSettings.getSettingsToBeServiced().put(Integer.valueOf(i2), permissionsSettings);\n            }\n        }",
        "public PermissionsSettings unregisterRequestPermissionsResultHandler(OnRequestPermissionsResultHandler onRequestPermissionsResultHandler) {\n        ArrayList<Integer> unregisterResultHandler = unregisterResultHandler(onRequestPermissionsResultHandler, this.fRequestPermissionsResultHandlers);\n        PermissionsSettings permissionsSettings = null;\n        if (unregisterResultHandler != null && !unregisterResultHandler.isEmpty()) {\n            Iterator<Integer> it = unregisterResultHandler.iterator();\n            while (it.hasNext()) {\n                permissionsSettings = PermissionsSettings.getSettingsToBeServiced().remove(it.next());\n            }\n        }",
        "protected void onDestroy() {\n        CameraActivity.clearCachedPhotos(this);\n        this.fEventHandler.dispose();\n        this.myGLView.requestExitAndWait();\n        this.myGLView = null;\n        this.myStore.disable();\n        this.fSplashView = null;\n        this.fCoronaRuntime.dispose();\n        this.fCoronaRuntime = null;\n        CoronaEnvironment.setCoronaActivity(null);\n        super.onDestroy();\n    }",
        "protected void onStart() {\n        super.onStart();\n    }",
        "protected void onResume() {\n        super.onResume();\n        if (needManualOrientationHandling()) {\n            getContentResolver().registerContentObserver(Settings.System.getUriFor(\"accelerometer_rotation\"), false, this.fAutoRotateObserver);\n            if (Settings.System.getInt(getContentResolver(), \"accelerometer_rotation\", 0) == 0) {\n                if ((isAtPortraitOrientation() && !supportsPortraitOrientation()) || (isAtLandscapeOrientation() && !supportsLandscapeOrientation())) {\n                    lockOrientation(getLoggedOrientation());\n                } else {\n                    lockCurrentOrientation();\n                }\n            }",
        "protected void onPause() {\n        super.onPause();\n        if (needManualOrientationHandling()) {\n            logCurrentOrientation();\n            getContentResolver().unregisterContentObserver(this.fAutoRotateObserver);\n        }\n        this.myIsActivityResumed = false;\n        requestSuspendCoronaRuntime();\n    }",
        "protected void onStop() {\n        super.onStop();\n    }",
        "protected void onNewIntent(Intent intent) {\n        super.onNewIntent(intent);\n        if (intent == null || this.fCoronaRuntime == null) {\n            return;\n        }\n        Bundle extras = intent.getExtras();\n        if ((intent.getData() != null || ((extras != null && extras.size() > 0) || !(intent.getAction() == null || intent.getAction().equals(\"android.intent.action.MAIN\")))) && !intent.hasExtra(NotificationReceivedTask.NAME)) {\n            setIntent(intent);\n            EventManager eventManager = this.fCoronaRuntime.getController().getEventManager();\n            if (eventManager != null) {\n                eventManager.addEvent(new RunnableEvent(new Runnable() { // from class: com.ansca.corona.CoronaActivity.3\n                    @Override // java.lang.Runnable\n                    public void run() {\n                        JavaToNativeShim.applicationOpenEvent(CoronaActivity.this.fCoronaRuntime);\n                    }\n                }",
        "public void onWindowFocusChanged(boolean z) {\n        super.onWindowFocusChanged(z);\n    }",
        "public void onScreenLockStateChanged(boolean z) {\n        if (this.myIsActivityResumed) {\n            this.fCoronaRuntime.updateViews();\n        }\n        requestResumeCoronaRuntime();\n    }",
        "public void onConfigurationChanged(Configuration configuration) {\n        super.onConfigurationChanged(configuration);\n        if (isSplashScreenShown()) {\n            showSplashScreen();\n        }\n    }",
        "private void requestResumeCoronaRuntime() {\n        if (this.myIsActivityResumed) {\n            Controller controller = this.fController;\n            if (controller == null) {\n                Log.i(\"Corona\", \"ERROR: CoronaActivity.requestResumeCoronaRuntime(): Can't resume the CoronaRuntime because our Controller died!\");\n                return;\n            }\n            SystemMonitor systemMonitor = controller.getSystemMonitor();\n            if (systemMonitor == null || !systemMonitor.isScreenLocked()) {\n                this.fController.start();\n                CoronaGLSurfaceView coronaGLSurfaceView = this.myGLView;\n                if (coronaGLSurfaceView != null) {\n                    coronaGLSurfaceView.onResumeCoronaRuntime();\n                }\n                CoronaRuntime coronaRuntime = this.fCoronaRuntime;\n                ViewManager viewManager = coronaRuntime != null ? coronaRuntime.getViewManager() : null;\n                if (viewManager != null) {\n                    viewManager.resume();\n                } else {\n                    Log.i(\"Corona\", \"ERROR: CoronaActivity.onResume(): Can't resume the CoronaActivity's views since there's no ViewManager!\");\n                }\n            }",
        "private void requestSuspendCoronaRuntime() {\n        Controller controller = this.fController;\n        if (controller != null) {\n            controller.stop();\n        } else {\n            Log.i(\"Corona\", \"ERROR: CoronaActivity.requestSuspendCoronaRuntime(): Can't suspend the CoronaRuntime because our Controller died!\");\n        }\n        CoronaGLSurfaceView coronaGLSurfaceView = this.myGLView;\n        if (coronaGLSurfaceView != null) {\n            coronaGLSurfaceView.onSuspendCoronaRuntime();\n        }\n        CoronaRuntime coronaRuntime = this.fCoronaRuntime;\n        ViewManager viewManager = coronaRuntime != null ? coronaRuntime.getViewManager() : null;\n        if (viewManager != null) {\n            viewManager.suspend();\n        } else {\n            Log.i(\"Corona\", \"ERROR: CoronaActivity.onPause(): Can't suspend the CoronaActivity's views since there's no ViewManager!\");\n        }\n    }",
        "public void hideSplashScreen() {\n        if (this.fSplashView != null) {\n            long currentTimeMillis = this.SPLASH_SCREEN_DURATION - (System.currentTimeMillis() - this.fStartTime);\n            if (currentTimeMillis > 0) {\n                try {\n                    synchronized (this) {\n                        wait(currentTimeMillis);\n                    }\n                }",
        "public void run() {\n                    ViewGroup viewGroup = (ViewGroup) linearLayout.getParent();\n                    if (viewGroup != null) {\n                        viewGroup.removeView(linearLayout);\n                    }\n                }",
        "public void showSelectImageWindowUsing(String str) {\n        SelectImageActivityResultHandler selectImageActivityResultHandler = new SelectImageActivityResultHandler(this.fCoronaRuntime);\n        selectImageActivityResultHandler.setDestinationFilePath(str);\n        int registerActivityResultHandler = registerActivityResultHandler(selectImageActivityResultHandler);\n        Intent intent = new Intent(\"android.intent.action.GET_CONTENT\");\n        intent.setType(\"image/*\");\n        startActivityForResult(Intent.createChooser(intent, \"\"), registerActivityResultHandler);\n    }",
        "public void showSelectVideoWindow() {\n        if (Build.VERSION.SDK_INT >= 16) {\n            PermissionsServices permissionsServices = new PermissionsServices(CoronaEnvironment.getApplicationContext());\n            int i = AnonymousClass5.$SwitchMap$com$ansca$corona$permissions$PermissionState[permissionsServices.getPermissionStateFor(PermissionsServices.Permission.READ_EXTERNAL_STORAGE).ordinal()];\n            if (i == 2) {\n                if (!permissionsServices.shouldNeverAskAgain(PermissionsServices.Permission.READ_EXTERNAL_STORAGE)) {\n                    permissionsServices.requestPermissions(new PermissionsSettings(PermissionsServices.Permission.READ_EXTERNAL_STORAGE), new SelectVideoRequestPermissionsResultHandler(\"media.selectVideo()\"));\n                    return;\n                }\n                CoronaRuntime coronaRuntime = this.fCoronaRuntime;\n                if (coronaRuntime != null) {\n                    CoronaRuntimeTaskDispatcher taskDispatcher = coronaRuntime.getTaskDispatcher();\n                    if (taskDispatcher != null) {\n                        taskDispatcher.send(new VideoPickerTask());\n                        return;\n                    } else {\n                        Log.v(\"Corona\", \"media.selectVideo() cannot continue because there's no Corona Runtime Task Dispatcher!\");\n                        return;\n                    }\n                }",
        "public void setDestinationFilePath(String str) {\n            this.fDestinationFilePath = str;\n        }",
        "public void onHandleActivityResult(CoronaActivity coronaActivity, int i, int i2, Intent intent) {\n            coronaActivity.unregisterActivityResultHandler(this);\n            final Uri data = intent != null ? intent.getData() : null;\n            String str = this.fDestinationFilePath;\n            final File file = (str == null || str.length() <= 0) ? null : new File(this.fDestinationFilePath);\n            this.fDestinationFilePath = null;\n            if (i2 != -1 || data == null) {\n                CoronaRuntime coronaRuntime = this.fCoronaRuntime;\n                if (coronaRuntime != null) {\n                    coronaRuntime.getTaskDispatcher().send(generateEvent(null, -1, -1L));\n                    return;\n                }\n                return;\n            }",
        "public void run() {\n                    File file2;\n                    String str2;\n                    String scheme;\n                    Context applicationContext = CoronaEnvironment.getApplicationContext();\n                    if (applicationContext == null) {\n                        return;\n                    }\n                    FileServices fileServices = new FileServices(applicationContext);\n                    long j = -1;\n                    boolean z = false;\n                    try {\n                        scheme = data.getScheme();\n                    } catch (Exception unused) {\n                    }\n                    if (\"file\".equals(scheme)) {\n                        file2 = new File(data.getPath());\n                        try {\n                            if (file2.exists()) {\n                                j = file2.length();\n                            }\n                        }",
        "protected MediaPickerTask generateEvent(String str, int i, long j) {\n            return new ImagePickerTask(str);\n        }",
        "protected String handleContentUri(Uri uri, File file, Context context, String str) {\n            String str2 = \"\";\n            FileServices fileServices = new FileServices(context);\n            InputStream inputStream = null;\n            try {\n                inputStream = context.getContentResolver().openInputStream(uri);\n                if (file == null) {\n                    UniqueFileNameBuilder uniqueFileNameBuilder = new UniqueFileNameBuilder();\n                    uniqueFileNameBuilder.setDirectory(CoronaEnvironment.getInternalTemporaryDirectory(context));\n                    uniqueFileNameBuilder.setFileNameFormat(this.fGenericFileName);\n                    uniqueFileNameBuilder.setFileExtension(str);\n                    file = uniqueFileNameBuilder.build();\n                }\n                if (fileServices.writeToFile(inputStream, file)) {\n                    str2 = file.getAbsolutePath();\n                }\n            }",
        "protected MediaPickerTask generateEvent(String str, int i, long j) {\n            return new VideoPickerTask(str, i, j);\n        }",
        "protected String handleContentUri(Uri uri, File file, Context context, String str) {\n            return uri.toString();\n        }",
        "protected String getDestinationFilePath() {\n            return this.fDestinationFilePath;\n        }",
        "protected void setDestinationFilePath(String str) {\n            this.fDestinationFilePath = str;\n        }",
        "public void onHandleRequestPermissionsResult(CoronaActivity coronaActivity, int i, String[] strArr, int[] iArr) {\n            PermissionsSettings unregisterRequestPermissionsResultHandler = coronaActivity.unregisterRequestPermissionsResultHandler(this);\n            if (unregisterRequestPermissionsResultHandler != null) {\n                unregisterRequestPermissionsResultHandler.markAsServiced();\n            }\n            if (new PermissionsServices(CoronaEnvironment.getApplicationContext()).getPermissionStateFor(PermissionsServices.Permission.READ_EXTERNAL_STORAGE) == PermissionState.GRANTED) {\n                executeSelectMedia();\n            } else if (coronaActivity != null) {\n                CoronaRuntime runtime = coronaActivity.getRuntime();\n                if (runtime != null) {\n                    CoronaRuntimeTaskDispatcher taskDispatcher = runtime.getTaskDispatcher();\n                    if (taskDispatcher != null) {\n                        taskDispatcher.send(generateEmptyMediaEvent());\n                        return;\n                    }\n                    Log.v(\"Corona\", this.fLuaAPI + \" cannot continue because there's no Corona Runtime Task Dispatcher!\");\n                    return;\n                }",
        "protected void executeSelectMedia() {\n            CoronaActivity coronaActivity = CoronaEnvironment.getCoronaActivity();\n            if (coronaActivity == null) {\n                return;\n            }\n            coronaActivity.showSelectImageWindowUsing(getDestinationFilePath());\n        }",
        "protected MediaPickerTask generateEmptyMediaEvent() {\n            return new ImagePickerTask();\n        }",
        "protected void executeSelectMedia() {\n            CoronaActivity coronaActivity = CoronaEnvironment.getCoronaActivity();\n            if (coronaActivity == null) {\n                return;\n            }\n            coronaActivity.showSelectVideoWindow();\n        }",
        "protected MediaPickerTask generateEmptyMediaEvent() {\n            return new VideoPickerTask();\n        }",
        "private boolean canWriteToExternalStorage() {\n        return checkCallingOrSelfPermission(PermissionsServices.Permission.WRITE_EXTERNAL_STORAGE) == 0 && \"mounted\".equals(Environment.getExternalStorageState());\n    }",
        "public MediaPickerTask generateEvent(String str) {\n            return new ImagePickerTask(str);\n        }",
        "public MediaPickerTask generateEvent(String str, int i, long j) {\n            return new ImagePickerTask(str);\n        }",
        "public MediaPickerTask generateEvent(String str) {\n            return new VideoPickerTask(str);\n        }",
        "public MediaPickerTask generateEvent(String str, int i, long j) {\n            return new VideoPickerTask(str, i, j);\n        }",
        "public void showCameraWindowForImage(String str) {\n        String str2;\n        MediaEventGenerator imagePickerEventGenerator = new ImagePickerEventGenerator();\n        if (str == null) {\n            File cacheDir = getApplicationContext().getCacheDir();\n            cacheDir.mkdirs();\n            UniqueFileNameBuilder uniqueFileNameBuilder = new UniqueFileNameBuilder();\n            uniqueFileNameBuilder.setDirectory(cacheDir);\n            uniqueFileNameBuilder.setFileNameFormat(\"Picture\");\n            uniqueFileNameBuilder.setFileExtension(\".jpg\");\n            File build = uniqueFileNameBuilder.build();\n            if (build == null) {\n                Log.v(\"Corona\", \"Failed to generate a unique file name for the camera shot.\");\n                CoronaRuntime coronaRuntime = this.fCoronaRuntime;\n                if (coronaRuntime == null || !coronaRuntime.isRunning()) {\n                    return;\n                }\n                this.fCoronaRuntime.getTaskDispatcher().send(imagePickerEventGenerator.generateEvent(\"\"));\n                return;\n            }",
        "public void showCameraWindowForVideo(int i, int i2) {\n        Intent intent = new Intent(\"android.media.action.VIDEO_CAPTURE\");\n        Context applicationContext = getApplicationContext();\n        String absolutePath = new File(CoronaEnvironment.getCachesDirectory(applicationContext), \"Video.3gp\").getAbsolutePath();\n        Uri createContentUriForFile = com.ansca.corona.storage.FileContentProvider.createContentUriForFile(applicationContext, absolutePath);\n        MediaEventGenerator videoPickerEventGenerator = new VideoPickerEventGenerator();\n        intent.putExtra(\"output\", createContentUriForFile);\n        if (i > 0) {\n            intent.putExtra(\"android.intent.extra.durationLimit\", i);\n        }\n        intent.putExtra(\"android.intent.extra.videoQuality\", i2);\n        showCameraWindowUsing(absolutePath, intent, videoPickerEventGenerator, createContentUriForFile);\n    }",
        "private void showCameraWindowUsing(String str, Intent intent, MediaEventGenerator mediaEventGenerator, Uri uri) {\n        PermissionState permissionStateFor = new PermissionsServices(CoronaEnvironment.getApplicationContext()).getPermissionStateFor(PermissionsServices.Permission.CAMERA);\n        ResourceServices resourceServices = new ResourceServices(CoronaEnvironment.getApplicationContext());\n        boolean hasCamera = CameraServices.hasCamera();\n        if (!hasCamera) {\n            Log.i(\"Corona\", \"WARNING: Camera not found.\");\n            Controller controller = this.fController;\n            if (controller != null) {\n                controller.showNativeAlert(\"Warning\", \"Camera not found.\", new String[]{resourceServices.getResources().getString(17039370)});\n            }",
        "private void launchCoronaCameraActivity(String str) {\n        Intent intent = new Intent(this, CameraActivity.class);\n        if (str != null && str.length() > 0) {\n            intent.setData(Uri.parse(str));\n        }\n        startActivityForResult(intent, registerActivityResultHandler(new TakePictureWithCoronaActivityResultHandler(this.fCoronaRuntime)));\n    }",
        "public void setSourceUri(Uri uri) {\n            this.fSourceUri = uri;\n        }",
        "public void setDestinationFilePath(String str) {\n            this.fDestinationFile = null;\n            if (str == null || str.length() <= 0) {\n                return;\n            }\n            this.fDestinationFile = new File(str);\n        }",
        "public void onHandleActivityResult(CoronaActivity coronaActivity, int i, int i2, Intent intent) {\n            coronaActivity.unregisterActivityResultHandler(this);\n            Uri uri = null;\n            String scheme = (intent == null || intent.getData() == null || intent.getData().getScheme() == null) ? null : intent.getData().getScheme();\n            String str = \"\";\n            long j = -1;\n            try {\n                uri = com.ansca.corona.storage.FileContentProvider.createContentUriForFile(coronaActivity.getApplicationContext(), this.fDestinationFile);\n            } catch (Throwable unused) {\n            }\n            if (i2 == -1 && uri != null && uri.equals(this.fSourceUri)) {\n                str = this.fDestinationFile.getAbsolutePath();\n            } else if (i2 == -1 && (this.fSourceUri != null || \"file\".equals(scheme))) {\n                File file = new File(this.fSourceUri.getPath());\n                Uri uri2 = this.fSourceUri;\n                final File file2 = (uri2 == null || !uri2.getScheme().equals(\"content\")) ? file : new File(new File(CoronaEnvironment.getApplicationContext().getApplicationInfo().dataDir), this.fSourceUri.getPath());\n                if (file2.exists()) {\n                    final long length = file2.length();\n                    final File file3 = this.fDestinationFile;\n                    if (file3 != null) {\n                        new Thread(new Runnable() { // from class: com.ansca.corona.CoronaActivity.TakeMediaWithExternalActivityResultHandler.1\n                            @Override // java.lang.Runnable\n                            public void run() {\n                                boolean moveFile = new FileServices(CoronaEnvironment.getApplicationContext()).moveFile(file2, file3);\n                                int durationOfVideo = CoronaActivity.getDurationOfVideo(file3.getAbsolutePath());\n                                if (TakeMediaWithExternalActivityResultHandler.this.fCoronaRuntime == null || TakeMediaWithExternalActivityResultHandler.this.fEventGenerator == null) {\n                                    return;\n                                }\n                                if (!moveFile) {\n                                    TakeMediaWithExternalActivityResultHandler.this.fCoronaRuntime.getTaskDispatcher().send(TakeMediaWithExternalActivityResultHandler.this.fEventGenerator.generateEvent(\"\"));\n                                } else {\n                                    TakeMediaWithExternalActivityResultHandler.this.fCoronaRuntime.getTaskDispatcher().send(TakeMediaWithExternalActivityResultHandler.this.fEventGenerator.generateEvent(file3.getAbsolutePath(), durationOfVideo, length));\n                                }\n                            }",
        "public void onHandleActivityResult(CoronaActivity coronaActivity, int i, int i2, Intent intent) {\n            Uri data;\n            coronaActivity.unregisterActivityResultHandler(this);\n            String path = (i2 != -1 || intent == null || (data = intent.getData()) == null) ? \"\" : data.getPath();\n            CoronaRuntime coronaRuntime = this.fCoronaRuntime;\n            if (coronaRuntime != null) {\n                coronaRuntime.getTaskDispatcher().send(new ImagePickerTask(path));\n            }\n        }",
        "public void showSendMailWindowUsing(MailSettings mailSettings) {\n        if (mailSettings == null) {\n            mailSettings = new MailSettings();\n        }\n        startActivityForResult(mailSettings.toIntent(), registerActivityResultHandler(new PopupActivityResultHandler(\"mail\")));\n    }",
        "public void showSendSmsWindowUsing(SmsSettings smsSettings) {\n        if (smsSettings == null) {\n            smsSettings = new SmsSettings();\n        }\n        startActivityForResult(smsSettings.toIntent(), registerActivityResultHandler(new PopupActivityResultHandler(\"sms\")));\n    }",
        "public void showRequestPermissionsWindowUsing(PermissionsSettings permissionsSettings) {\n        String[] strArr;\n        if (permissionsSettings == null || Build.VERSION.SDK_INT < 23) {\n            Log.v(\"Corona\", \"Cannot request permissions. Invalid environment!\");\n            return;\n        }\n        LinkedHashSet<String> permissions = permissionsSettings.getPermissions();\n        if (permissions == null || permissions.isEmpty()) {\n            Log.v(\"Corona\", \"No App Permissions requested!\");\n            return;\n        }\n        PermissionsServices permissionsServices = new PermissionsServices(CoronaEnvironment.getApplicationContext());\n        LinkedHashSet<String> linkedHashSet = new LinkedHashSet<>();\n        Iterator<String> it = permissions.iterator();\n        while (it.hasNext()) {\n            String next = it.next();\n            if (permissionsServices.isPAAppPermissionName(next)) {\n                String permissionGroupFromPAAppPermissionName = permissionsServices.getPermissionGroupFromPAAppPermissionName(next);\n                strArr = permissionsServices.findAllPermissionsInManifestForGroup(permissionGroupFromPAAppPermissionName);\n                if (strArr == null || strArr.length <= 0) {\n                    showPermissionGroupMissingFromManifestAlert(permissionGroupFromPAAppPermissionName);\n                    return;\n                }\n            }",
        "public void onHandleActivityResult(CoronaActivity coronaActivity, int i, int i2, Intent intent) {\n            EventManager eventManager;\n            coronaActivity.unregisterActivityResultHandler(this);\n            if (CoronaActivity.this.fCoronaRuntime == null || (eventManager = CoronaActivity.this.fCoronaRuntime.getController().getEventManager()) == null) {\n                return;\n            }\n            final String str = this.fPopupName;\n            eventManager.addEvent(new RunnableEvent(new Runnable() { // from class: com.ansca.corona.CoronaActivity.PopupActivityResultHandler.1\n                @Override // java.lang.Runnable\n                public void run() {\n                    if (CoronaActivity.this.fCoronaRuntime.getController() != null) {\n                        JavaToNativeShim.popupClosedEvent(CoronaActivity.this.fCoronaRuntime, str, false);\n                    }\n                }",
        "protected void onActivityResult(int i, int i2, Intent intent) {\n        super.onActivityResult(i, i2, intent);\n        OnActivityResultHandler onActivityResultHandler = (OnActivityResultHandler) this.fActivityResultHandlers.get(Integer.valueOf(i));\n        if (onActivityResultHandler == null) {\n            return;\n        }\n        onActivityResultHandler.onHandleActivityResult(this, i, i2, intent);\n    }",
        "public void onRequestPermissionsResult(int i, String[] strArr, int[] iArr) {\n        super.onRequestPermissionsResult(i, strArr, iArr);\n        OnRequestPermissionsResultHandler onRequestPermissionsResultHandler = (OnRequestPermissionsResultHandler) this.fRequestPermissionsResultHandlers.get(Integer.valueOf(i));\n        if (onRequestPermissionsResultHandler == null) {\n            return;\n        }\n        onRequestPermissionsResultHandler.onHandleRequestPermissionsResult(this, i, strArr, iArr);\n    }",
        "public boolean onKeyDown(int i, KeyEvent keyEvent) {\n        ViewManager viewManager;\n        if (this.myInputHandler.handle(keyEvent)) {\n            return true;\n        }\n        if (i == 24 || i == 25) {\n            try {\n                ((AudioManager) getSystemService(\"audio\")).adjustSuggestedStreamVolume(i == 24 ? 1 : -1, getVolumeControlStream(), 21);\n                return true;\n            } catch (Exception unused) {\n            }\n        }",
        "public boolean onKeyUp(int i, KeyEvent keyEvent) {\n        if (this.myInputHandler.handle(keyEvent)) {\n            return true;\n        }\n        return super.onKeyUp(i, keyEvent);\n    }",
        "public void dispose() {\n            View contentView = getContentView();\n            if (contentView != null) {\n                if (Build.VERSION.SDK_INT >= 16) {\n                    ApiLevel16.removeOnGlobalLayoutListener(contentView.getViewTreeObserver(), this);\n                } else {\n                    contentView.getViewTreeObserver().removeGlobalOnLayoutListener(this);\n                }\n            }",
        "public void onGlobalLayout() {\n            View contentView;\n            boolean isAcceptingText = ((InputMethodManager) this.fActivity.getSystemService(\"input_method\")).isAcceptingText();\n            Ticks fromCurrentTime = Ticks.fromCurrentTime();\n            if (isAcceptingText) {\n                this.fIsUpdatingLayout = true;\n                this.fUpdateLayoutEndTicks = fromCurrentTime.addSeconds(2L);\n            }\n            if (this.fIsUpdatingLayout && this.fUpdateLayoutEndTicks.compareTo(fromCurrentTime) < 0) {\n                this.fIsUpdatingLayout = false;\n            }\n            if (this.fIsUpdatingLayout && (contentView = getContentView()) != null) {\n                contentView.requestLayout();\n            }\n        }",
        "private View getContentView() {\n            ViewManager viewManager;\n            ViewGroup contentView;\n            CoronaRuntime coronaRuntime = this.fActivity.fCoronaRuntime;\n            if (coronaRuntime == null || (viewManager = coronaRuntime.getViewManager()) == null || (contentView = viewManager.getContentView()) == null) {\n                return null;\n            }\n            return contentView;\n        }",
        "public void forwardRequestPermissionsResultToLua(final RequestPermissionsResultData requestPermissionsResultData) {\n            CoronaRuntimeTask coronaRuntimeTask = new CoronaRuntimeTask() { // from class: com.ansca.corona.CoronaActivity.DefaultRequestPermissionsResultHandler.1\n                @Override // com.ansca.corona.CoronaRuntimeTask\n                public void executeUsing(CoronaRuntime coronaRuntime) {\n                    try {\n                        LuaState luaState = coronaRuntime.getLuaState();\n                        int listener = requestPermissionsResultData.getPermissionsSettings().getListener();\n                        if (-1 != listener && listener != 0) {\n                            CoronaLua.newEvent(luaState, \"popup\");\n                            luaState.pushString(\"appPermissionRequest\");\n                            luaState.setField(-2, \"type\");\n                            ArrayList<String> grantedPermissions = requestPermissionsResultData.getGrantedPermissions();\n                            if (grantedPermissions != null) {\n                                Object[] array = grantedPermissions.toArray();\n                                if (DefaultRequestPermissionsResultHandler.createLuaTableFromStringArray(luaState, (String[]) Arrays.copyOf(array, array.length, String[].class)) > 0) {\n                                    luaState.setField(-2, \"grantedAppPermissions\");\n                                }\n                            }",
        "public void onHandleRequestPermissionsResult(CoronaActivity coronaActivity, int i, String[] strArr, int[] iArr) {\n            boolean z;\n            PermissionsServices permissionsServices = new PermissionsServices(coronaActivity);\n            ArrayList arrayList = new ArrayList();\n            ArrayList arrayList2 = new ArrayList();\n            ArrayList arrayList3 = new ArrayList();\n            ArrayList arrayList4 = new ArrayList();\n            boolean z2 = false;\n            for (int i2 = 0; i2 < strArr.length; i2++) {\n                String str = strArr[i2];\n                if (permissionsServices.isPartOfPAAppPermission(str)) {\n                    str = permissionsServices.getPAAppPermissionNameFromAndroidPermission(str);\n                }\n                if (iArr[i2] == 0) {\n                    arrayList.add(strArr[i2]);\n                    if (!arrayList2.contains(str) && !arrayList4.contains(str)) {\n                        arrayList2.add(str);\n                    }\n                }"
    ]
}